/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 01 04:37:46 GMT 2025
 */

package com.jwetherell.algorithms.data_structures;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jwetherell.algorithms.data_structures.SkipList;
import com.jwetherell.algorithms.data_structures.SkipListMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SkipListMap_ESTest extends SkipListMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SkipListMap.SkipListMapNode<Integer, Integer> skipListMap_SkipListMapNode0 = new SkipListMap.SkipListMapNode<Integer, Integer>(0, integer0);
      String string0 = skipListMap_SkipListMapNode0.toString();
      assertEquals("data=0\nnext=[none]value = null\n", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(1474);
      SkipListMap<Integer, Integer> skipListMap0 = new SkipListMap<Integer, Integer>();
      skipListMap0.put(integer0, integer0);
      int int0 = skipListMap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1734);
      SkipListMap.SkipListMapNode<Integer, Integer> skipListMap_SkipListMapNode0 = new SkipListMap.SkipListMapNode<Integer, Integer>(1734, integer0);
      SkipListMap<Integer, SkipListMap.SkipListMapNode<Integer, Integer>> skipListMap0 = new SkipListMap<Integer, SkipListMap.SkipListMapNode<Integer, Integer>>();
      skipListMap0.put(integer0, skipListMap_SkipListMapNode0);
      SkipListMap.SkipListMapNode<Integer, Integer> skipListMap_SkipListMapNode1 = skipListMap0.remove(integer0);
      assertSame(skipListMap_SkipListMapNode1, skipListMap_SkipListMapNode0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SkipListMap<Integer, SkipListMap.SkipListMapNode<Integer, Integer>> skipListMap0 = new SkipListMap<Integer, SkipListMap.SkipListMapNode<Integer, Integer>>();
      Integer integer0 = new Integer(0);
      SkipListMap.SkipListMapNode<Integer, Integer> skipListMap_SkipListMapNode0 = new SkipListMap.SkipListMapNode<Integer, Integer>(0, integer0);
      skipListMap0.put(integer0, skipListMap_SkipListMapNode0);
      SkipListMap.SkipListMapNode<Integer, Integer> skipListMap_SkipListMapNode1 = skipListMap0.get(integer0);
      assertSame(skipListMap_SkipListMapNode1, skipListMap_SkipListMapNode0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SkipListMap<Integer, SkipListMap.SkipListMapNode<Integer, Integer>> skipListMap0 = new SkipListMap<Integer, SkipListMap.SkipListMapNode<Integer, Integer>>();
      Integer integer0 = new Integer(0);
      SkipListMap.SkipListMapNode<Integer, Integer> skipListMap_SkipListMapNode0 = new SkipListMap.SkipListMapNode<Integer, Integer>(1, integer0);
      skipListMap0.put(integer0, skipListMap_SkipListMapNode0);
      boolean boolean0 = skipListMap0.contains(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SkipListMap<Integer, SkipListMap.SkipListMapNode<Integer, Integer>> skipListMap0 = new SkipListMap<Integer, SkipListMap.SkipListMapNode<Integer, Integer>>();
      Integer integer0 = new Integer(32769);
      SkipListMap.SkipListMapNode<Integer, Integer> skipListMap_SkipListMapNode0 = new SkipListMap.SkipListMapNode<Integer, Integer>(32769, integer0);
      skipListMap0.put((Integer) null, skipListMap_SkipListMapNode0);
      // Undeclared exception!
      skipListMap0.toString();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SkipListMap<Integer, Integer> skipListMap0 = new SkipListMap<Integer, Integer>();
      // Undeclared exception!
      try { 
        skipListMap0.swapNode((SkipList.Node<Integer>) null, (SkipList.Node<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.SkipListMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SkipListMap<Integer, Integer> skipListMap0 = new SkipListMap<Integer, Integer>();
      skipListMap0.put((Integer) null, (Integer) null);
      // Undeclared exception!
      try { 
        skipListMap0.remove((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.SkipList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SkipListMap<Integer, Integer> skipListMap0 = new SkipListMap<Integer, Integer>();
      skipListMap0.put((Integer) null, (Integer) null);
      // Undeclared exception!
      try { 
        skipListMap0.put((Integer) null, (Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.SkipList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SkipListMap<Integer, Integer> skipListMap0 = new SkipListMap<Integer, Integer>();
      skipListMap0.put((Integer) null, (Integer) null);
      // Undeclared exception!
      try { 
        skipListMap0.get((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.SkipList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SkipListMap<Integer, SkipListMap.SkipListMapNode<Integer, Integer>> skipListMap0 = new SkipListMap<Integer, SkipListMap.SkipListMapNode<Integer, Integer>>();
      Integer integer0 = new Integer((-2524));
      // Undeclared exception!
      try { 
        skipListMap0.createNewNode((-2524), integer0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.SkipList$Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SkipListMap<Integer, Integer> skipListMap0 = new SkipListMap<Integer, Integer>();
      skipListMap0.put((Integer) null, (Integer) null);
      // Undeclared exception!
      try { 
        skipListMap0.contains((Integer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.SkipList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SkipListMap<Integer, Integer> skipListMap0 = new SkipListMap<Integer, Integer>();
      Integer integer0 = new Integer((-1));
      SkipList.Node<Integer> skipList_Node0 = skipListMap0.createNewNode((-1), integer0);
      SkipList.Node<Integer> skipList_Node1 = new SkipList.Node<Integer>((-1), integer0);
      skipListMap0.swapNode(skipList_Node0, skipList_Node1);
      assertEquals(0, skipListMap0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(0);
      SkipListMap<Integer, Integer> skipListMap0 = new SkipListMap<Integer, Integer>();
      SkipListMap.SkipListMapNode<Integer, Integer> skipListMap_SkipListMapNode0 = new SkipListMap.SkipListMapNode<Integer, Integer>(0, integer0);
      skipListMap0.swapNode(skipListMap_SkipListMapNode0, skipListMap_SkipListMapNode0);
      assertEquals(0, skipListMap0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SkipListMap<Integer, SkipListMap.SkipListMapNode<Integer, Integer>> skipListMap0 = new SkipListMap<Integer, SkipListMap.SkipListMapNode<Integer, Integer>>();
      Integer integer0 = new Integer(0);
      SkipList.Node<Integer> skipList_Node0 = new SkipList.Node<Integer>(0, integer0);
      skipListMap0.swapNode(skipList_Node0, skipList_Node0);
      assertEquals(0, skipListMap0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Integer integer0 = new Integer((-2145159529));
      SkipListMap<Integer, Integer> skipListMap0 = new SkipListMap<Integer, Integer>();
      skipListMap0.put(integer0, integer0);
      skipListMap0.put(integer0, integer0);
      String string0 = skipListMap0.toString();
      assertEquals("-2145159529=-2145159529\n-2145159529=-2145159529", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SkipListMap<Integer, SkipListMap.SkipListMapNode<Integer, Integer>> skipListMap0 = new SkipListMap<Integer, SkipListMap.SkipListMapNode<Integer, Integer>>();
      String string0 = skipListMap0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SkipListMap<Integer, Integer> skipListMap0 = new SkipListMap<Integer, Integer>();
      Integer integer0 = new Integer((-2542));
      skipListMap0.put(integer0, (Integer) null);
      boolean boolean0 = skipListMap0.validate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SkipListMap<Integer, Integer> skipListMap0 = new SkipListMap<Integer, Integer>();
      Integer integer0 = new Integer((-1123));
      Integer integer1 = new Integer((-1733));
      skipListMap0.put(integer1, integer0);
      skipListMap0.put(integer0, integer0);
      boolean boolean0 = skipListMap0.validate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer((-1840700300));
      SkipListMap<Integer, Integer> skipListMap0 = new SkipListMap<Integer, Integer>();
      skipListMap0.put(integer0, integer0);
      skipListMap0.put(integer0, integer0);
      boolean boolean0 = skipListMap0.validate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SkipListMap<Integer, SkipListMap.SkipListMapNode<Integer, Integer>> skipListMap0 = new SkipListMap<Integer, SkipListMap.SkipListMapNode<Integer, Integer>>();
      boolean boolean0 = skipListMap0.validate();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SkipListMap<Integer, Integer> skipListMap0 = new SkipListMap<Integer, Integer>();
      Integer integer0 = new Integer(1);
      Integer integer1 = skipListMap0.remove(integer0);
      assertNull(integer1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SkipListMap<Integer, Integer> skipListMap0 = new SkipListMap<Integer, Integer>();
      Integer integer0 = skipListMap0.get((Integer) null);
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SkipListMap<Integer, SkipListMap.SkipListMapNode<Integer, Integer>> skipListMap0 = new SkipListMap<Integer, SkipListMap.SkipListMapNode<Integer, Integer>>();
      int int0 = skipListMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SkipListMap<Integer, Integer> skipListMap0 = new SkipListMap<Integer, Integer>();
      skipListMap0.put((Integer) null, (Integer) null);
      boolean boolean0 = skipListMap0.validate();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SkipListMap<Integer, Integer> skipListMap0 = new SkipListMap<Integer, Integer>();
      skipListMap0.clear();
      assertEquals(0, skipListMap0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SkipListMap<Integer, Integer> skipListMap0 = new SkipListMap<Integer, Integer>();
      Map<Integer, Integer> map0 = skipListMap0.toMap();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SkipListMap<Integer, Integer> skipListMap0 = new SkipListMap<Integer, Integer>();
      boolean boolean0 = skipListMap0.contains((Integer) null);
      assertFalse(boolean0);
  }
}

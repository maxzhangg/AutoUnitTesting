/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 01 04:35:27 GMT 2025
 */

package com.jwetherell.algorithms.data_structures;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jwetherell.algorithms.data_structures.Graph;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Graph_ESTest extends Graph_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      java.util.List<Graph.Edge<Integer>> list0 = graph0.getEdges();
      Graph.CostPathPair<Integer> graph_CostPathPair0 = new Graph.CostPathPair<Integer>(1534, list0);
      graph_CostPathPair0.equals(graph_CostPathPair0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Integer integer0 = new Integer(1247);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 1247);
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(graph_Vertex0);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(31, graph_Vertex1, graph_Vertex1);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>(graph_Edge0);
      Graph.Vertex<Integer> graph_Vertex2 = graph_Edge1.getFromVertex();
      graph_Vertex2.getWeight();
      Graph.TYPE graph_TYPE0 = Graph.TYPE.UNDIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>(graph_TYPE0);
      java.util.List<Graph.Edge<Integer>> list0 = graph0.getEdges();
      Graph.CostPathPair<Integer> graph_CostPathPair0 = new Graph.CostPathPair<Integer>(2, list0);
      java.util.List<Graph.Edge<Integer>> list1 = graph_CostPathPair0.getPath();
      Graph.CostPathPair<Integer> graph_CostPathPair1 = new Graph.CostPathPair<Integer>(2, list1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Integer integer0 = new Integer(89);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 89);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(89, graph_Vertex0, graph_Vertex0);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>(graph_Edge0);
      Graph.Edge<Integer> graph_Edge2 = new Graph.Edge<Integer>(graph_Edge1);
      graph_Edge1.compareTo(graph_Edge2);
      Graph.Vertex<Integer> graph_Vertex1 = graph_Edge1.getFromVertex();
      graph_Vertex0.getEdge(graph_Vertex1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, (-1));
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>((Integer) null, 1675);
      Graph.TYPE graph_TYPE0 = Graph.TYPE.UNDIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>(graph_TYPE0);
      graph0.hashCode();
      graph0.toString();
      graph0.getType();
      graph_Vertex0.equals(graph_TYPE0);
      java.util.List<Graph.Edge<Integer>> list0 = graph_Vertex0.getEdges();
      Graph.CostPathPair<Integer> graph_CostPathPair0 = new Graph.CostPathPair<Integer>(1675, list0);
      Object object0 = new Object();
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(150, graph_Vertex0);
      graph_Vertex0.getWeight();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(graph_Vertex0);
      graph_Vertex1.setWeight(813);
      graph_Vertex0.getEdge(graph_Vertex1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Graph.TYPE graph_TYPE0 = Graph.TYPE.DIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>(graph_TYPE0);
      graph0.getType();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Integer integer0 = new Integer(89);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(89, graph_Vertex0, graph_Vertex0);
      graph_Vertex0.addEdge(graph_Edge0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      int int0 = (-1214);
      Integer integer0 = new Integer((-1214));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>((-1214), graph_Vertex0, (Graph.Vertex<Integer>) null);
      Integer integer1 = null;
      try {
        integer1 = new Integer(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Both 'to' and 'from' vertices need to be non-NULL.
         //
         verifyException("com.jwetherell.algorithms.data_structures.Graph$Edge", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Integer integer0 = new Integer((-4126));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 0);
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(graph_Vertex0);
      int int0 = (-3530);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>((-3530), graph_Vertex0);
      graph_Vertex1.setWeight((-2913));
      graph_Vertex1.toString();
      graph_CostVertexPair0.setCost((-4126));
      graph_CostVertexPair0.setCost((-854));
      graph_CostVertexPair0.equals((Object) null);
      Graph.Edge<Integer> graph_Edge0 = graph_Vertex1.getEdge(graph_Vertex0);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>((Graph.Edge<Integer>) null);
      int int1 = 0;
      graph_Edge1.setCost(int1);
      graph_Vertex0.getWeight();
      graph_Edge0.setCost(int0);
      // Undeclared exception!
      try { 
        graph_Edge0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Graph$Edge", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(graph_Vertex0);
      graph_Vertex0.getEdge(graph_Vertex1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      Integer integer0 = new Integer((-1363));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>((-1363), graph_Vertex0);
      graph_CostVertexPair0.setCost(3253);
      graph_CostVertexPair0.equals(graph_CostVertexPair0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Integer integer0 = new Integer(89);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 89);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(89, graph_Vertex0, graph_Vertex0);
      graph_Vertex0.addEdge(graph_Edge0);
      Graph<Integer> graph0 = new Graph<Integer>();
      graph_Vertex0.toString();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>((Integer) null);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(1913, graph_Vertex0);
      graph_CostVertexPair0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>((Integer) null);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(1669, graph_Vertex0, graph_Vertex0);
      graph_Vertex0.addEdge(graph_Edge0);
      Integer integer0 = new Integer(988);
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(integer0, (-4938));
      graph_Vertex0.getEdge(graph_Vertex1);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>((Graph.Edge<Integer>) null);
      int int0 = 0;
      graph_Edge0.setCost(int0);
      Graph.TYPE graph_TYPE0 = Graph.TYPE.UNDIRECTED;
      Graph<Integer> graph0 = null;
      try {
        graph0 = new Graph<Integer>(graph_TYPE0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Graph$Edge", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Integer integer0 = new Integer(1695);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, (-1078));
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(0, graph_Vertex0, graph_Vertex0);
      Graph.Vertex<Integer> graph_Vertex1 = graph_Edge0.getToVertex();
      graph_Vertex0.addEdge(graph_Edge0);
      Graph.Edge<Integer> graph_Edge1 = graph_Vertex1.getEdge(graph_Vertex0);
      Graph.Edge<Integer> graph_Edge2 = new Graph.Edge<Integer>(graph_Edge1);
      graph_Edge2.setCost(1695);
      Graph.Vertex<Integer> graph_Vertex2 = graph_Edge2.getFromVertex();
      graph_Vertex2.getEdge(graph_Vertex0);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(31, graph_Vertex2);
      graph_CostVertexPair0.toString();
      Graph.Edge<Integer> graph_Edge3 = new Graph.Edge<Integer>((-2759), graph_Vertex1, graph_Vertex1);
      Object object0 = new Object();
      graph_Edge0.equals(object0);
      graph_Edge0.getCost();
      graph_Vertex1.toString();
      Graph<Integer> graph0 = new Graph<Integer>();
      graph_CostVertexPair0.getCost();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Integer integer0 = new Integer((-424));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 1);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(1, graph_Vertex0);
      Graph.CostVertexPair<Integer> graph_CostVertexPair1 = new Graph.CostVertexPair<Integer>(0, graph_Vertex0);
      graph_CostVertexPair0.compareTo(graph_CostVertexPair1);
      graph_Vertex0.toString();
      Graph.Vertex<Integer> graph_Vertex1 = graph_CostVertexPair0.getVertex();
      graph_Vertex1.compareTo(graph_Vertex0);
      Object object0 = new Object();
      graph_CostVertexPair1.equals(object0);
      graph_Vertex0.setWeight(31);
      graph_CostVertexPair0.compareTo(graph_CostVertexPair1);
      graph_CostVertexPair0.compareTo(graph_CostVertexPair1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>((Integer) null, 1905);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(1905, graph_Vertex0);
      graph_CostVertexPair0.compareTo(graph_CostVertexPair0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>((Integer) null);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(1913, graph_Vertex0);
      graph_CostVertexPair0.getVertex();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      Integer integer0 = new Integer((-1363));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(3, graph_Vertex0);
      Graph.CostVertexPair<Integer> graph_CostVertexPair1 = new Graph.CostVertexPair<Integer>((-1363), graph_Vertex0);
      graph_CostVertexPair0.compareTo(graph_CostVertexPair1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Integer integer0 = new Integer(89);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 89);
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(integer0, 89);
      graph_Vertex0.getEdge(graph_Vertex1);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(89, graph_Vertex0, graph_Vertex0);
      graph_Vertex0.addEdge(graph_Edge0);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>(graph_Edge0);
      Graph.Edge<Integer> graph_Edge2 = new Graph.Edge<Integer>(graph_Edge1);
      graph_Edge1.compareTo(graph_Edge2);
      graph_Vertex0.compareTo(graph_Vertex1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Graph.TYPE graph_TYPE0 = Graph.TYPE.UNDIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>(graph_TYPE0);
      Graph<Integer> graph1 = new Graph<Integer>(graph0);
      Object object0 = new Object();
      graph1.equals(object0);
      graph1.getType();
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(0, graph_Vertex0, graph_Vertex0);
      Graph.Vertex<Integer> graph_Vertex1 = graph_Edge0.getToVertex();
      graph_Vertex1.getEdge(graph_Vertex0);
      Graph.Edge<Integer> graph_Edge1 = null;
      try {
        graph_Edge1 = new Graph.Edge<Integer>((Graph.Edge<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Graph$Edge", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      Graph<Integer> graph1 = new Graph<Integer>(graph0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Graph.TYPE graph_TYPE0 = Graph.TYPE.DIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>();
      java.util.List<Graph.Vertex<Integer>> list0 = graph0.getVertices();
      java.util.List<Graph.Edge<Integer>> list1 = graph0.getEdges();
      Graph<Integer> graph1 = new Graph<Integer>(graph_TYPE0, list0, list1);
      graph0.equals(graph1);
      Graph<Integer> graph2 = new Graph<Integer>(graph1);
      java.util.List<Graph.Edge<Integer>> list2 = graph2.getEdges();
      Graph.CostPathPair<Integer> graph_CostPathPair0 = new Graph.CostPathPair<Integer>(0, list2);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      graph0.getVertices();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Integer integer0 = new Integer(25);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 25);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(25, graph_Vertex0, graph_Vertex0);
      Graph.Vertex<Integer> graph_Vertex1 = graph_Edge0.getToVertex();
      graph_Vertex1.addEdge(graph_Edge0);
      Graph<Integer> graph0 = new Graph<Integer>();
      graph0.equals(graph_Vertex1);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      Object object0 = new Object();
      graph0.equals(object0);
      Integer integer0 = new Integer((-1908));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      graph_Vertex0.pathTo((Graph.Vertex<Integer>) null);
      graph_Vertex0.addEdge((Graph.Edge<Integer>) null);
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(integer0);
      graph_Vertex1.equals(graph_Vertex0);
      graph0.hashCode();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      graph0.getType();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Integer integer0 = new Integer((-975));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(integer0, 282);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(282, graph_Vertex0, graph_Vertex1);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>(graph_Edge0);
      graph_Vertex0.addEdge(graph_Edge1);
      Graph.Edge<Integer> graph_Edge2 = graph_Vertex0.getEdge(graph_Vertex1);
      graph_Vertex0.equals(graph_Edge0);
      Graph.Edge<Integer> graph_Edge3 = new Graph.Edge<Integer>(graph_Edge2);
      graph_Edge0.setCost((-189));
      Graph.Vertex<Integer> graph_Vertex2 = graph_Edge3.getToVertex();
      graph_Edge3.compareTo(graph_Edge0);
      Graph.Edge<Integer> graph_Edge4 = new Graph.Edge<Integer>(282, graph_Vertex2, graph_Vertex0);
      graph_Edge4.compareTo(graph_Edge3);
      graph_Edge4.getToVertex();
      Graph.CostPathPair<Integer> graph_CostPathPair0 = new Graph.CostPathPair<Integer>(2, (java.util.List<Graph.Edge<Integer>>) null);
      int int0 = 0;
      graph_CostPathPair0.setCost(int0);
      graph_CostPathPair0.getCost();
      int int1 = 31;
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = null;
      try {
        graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(int1, graph_Vertex1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path cannot be NULL.
         //
         verifyException("com.jwetherell.algorithms.data_structures.Graph$CostPathPair", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Integer integer0 = new Integer(89);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 89);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(89, graph_Vertex0, graph_Vertex0);
      graph_Vertex0.addEdge(graph_Edge0);
      graph_Vertex0.getEdge(graph_Vertex0);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>(graph_Edge0);
      Graph.Edge<Integer> graph_Edge2 = new Graph.Edge<Integer>(graph_Edge1);
      graph_Edge1.compareTo(graph_Edge2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Graph.CostPathPair<Integer> graph_CostPathPair0 = new Graph.CostPathPair<Integer>(0, (java.util.List<Graph.Edge<Integer>>) null);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        graph_CostPathPair0.equals(object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // path cannot be NULL.
         //
         verifyException("com.jwetherell.algorithms.data_structures.Graph$CostPathPair", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Integer integer0 = new Integer((-2390));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      graph_Vertex0.toString();
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(integer0, (-2390));
      graph_Vertex1.pathTo(graph_Vertex0);
      graph_Vertex0.compareTo(graph_Vertex1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      Graph<Integer> graph0 = new Graph<Integer>();
      graph_Vertex0.equals(graph0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      Integer integer0 = new Integer((-1363));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>((-1363), graph_Vertex0);
      graph_CostVertexPair0.equals(graph_CostVertexPair0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Integer integer0 = new Integer(89);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 89);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(89, graph_Vertex0, graph_Vertex0);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>(graph_Edge0);
      graph_Edge1.setCost(89);
      Graph.Edge<Integer> graph_Edge2 = new Graph.Edge<Integer>(graph_Edge1);
      graph_Edge1.compareTo(graph_Edge2);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Integer integer0 = new Integer(89);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 89);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(89, graph_Vertex0, graph_Vertex0);
      graph_Vertex0.addEdge(graph_Edge0);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>(graph_Edge0);
      Graph.Edge<Integer> graph_Edge2 = new Graph.Edge<Integer>(graph_Edge1);
      graph_Edge2.setCost(1);
      graph_Edge1.compareTo(graph_Edge2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Integer integer0 = new Integer((-975));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(integer0, 282);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(282, graph_Vertex0, graph_Vertex1);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>(graph_Edge0);
      graph_Vertex0.addEdge(graph_Edge1);
      Graph.Edge<Integer> graph_Edge2 = graph_Vertex0.getEdge(graph_Vertex1);
      graph_Vertex0.equals(graph_Edge0);
      Graph.Edge<Integer> graph_Edge3 = new Graph.Edge<Integer>(graph_Edge2);
      graph_Edge0.setCost((-189));
      Graph.Vertex<Integer> graph_Vertex2 = graph_Edge3.getToVertex();
      graph_Edge3.compareTo(graph_Edge0);
      Graph.Edge<Integer> graph_Edge4 = new Graph.Edge<Integer>(282, graph_Vertex2, graph_Vertex0);
      graph_Edge4.compareTo(graph_Edge3);
      Graph<Integer> graph0 = new Graph<Integer>();
      Graph.TYPE graph_TYPE0 = graph0.getType();
      Integer integer1 = new Integer((-533));
      graph_Vertex1.equals(integer1);
      java.util.List<Graph.Edge<Integer>> list0 = graph_Vertex2.getEdges();
      Graph.CostPathPair<Integer> graph_CostPathPair0 = new Graph.CostPathPair<Integer>((-1086), list0);
      Object object0 = new Object();
      graph_CostPathPair0.equals(graph_TYPE0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Graph.TYPE graph_TYPE0 = Graph.TYPE.DIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>(graph_TYPE0);
      java.util.List<Graph.Vertex<Integer>> list0 = graph0.getVertices();
      Collection<Graph.Edge<Integer>> collection0 = null;
      Graph<Integer> graph1 = null;
      try {
        graph1 = new Graph<Integer>(list0, (Collection<Graph.Edge<Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Graph.TYPE graph_TYPE0 = Graph.TYPE.UNDIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>(graph_TYPE0);
      java.util.List<Graph.Vertex<Integer>> list0 = graph0.getVertices();
      java.util.List<Graph.Edge<Integer>> list1 = graph0.getEdges();
      Graph<Integer> graph1 = new Graph<Integer>(list0, list1);
      graph1.equals(list0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Integer integer0 = new Integer(89);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 89);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(89, graph_Vertex0, graph_Vertex0);
      java.util.List<Graph.Edge<Integer>> list0 = graph_Vertex0.getEdges();
      Graph<Integer> graph0 = new Graph<Integer>((Collection<Graph.Vertex<Integer>>) null, list0);
      graph0.equals(list0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Graph.TYPE graph_TYPE0 = Graph.TYPE.UNDIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>();
      java.util.List<Graph.Vertex<Integer>> list0 = graph0.getVertices();
      Graph<Integer> graph1 = new Graph<Integer>(graph0);
      java.util.List<Graph.Edge<Integer>> list1 = graph1.getEdges();
      Graph<Integer> graph2 = new Graph<Integer>(graph_TYPE0, list0, list1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      graph0.equals(graph0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>((Integer) null, 1905);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(1905, graph_Vertex0);
      graph_CostVertexPair0.toString();
      graph_CostVertexPair0.compareTo(graph_CostVertexPair0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      graph0.toString();
      Graph.TYPE.values();
      graph0.hashCode();
      Integer integer0 = new Integer((-2094));
      java.util.List<Graph.Edge<Integer>> list0 = graph0.getEdges();
      Graph.CostPathPair<Integer> graph_CostPathPair0 = new Graph.CostPathPair<Integer>((-2094), list0);
      java.util.List<Graph.Edge<Integer>> list1 = graph_CostPathPair0.getPath();
      Graph.CostPathPair<Integer> graph_CostPathPair1 = new Graph.CostPathPair<Integer>(1545, list1);
      graph_CostPathPair0.equals(graph_CostPathPair1);
      graph0.hashCode();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Graph.TYPE graph_TYPE0 = Graph.TYPE.UNDIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>(graph_TYPE0);
      graph0.hashCode();
      graph0.toString();
      graph0.toString();
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>((Integer) null);
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(graph_Vertex0);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(2153, graph_Vertex1);
      graph_CostVertexPair0.toString();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      graph0.hashCode();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 1);
      java.util.List<Graph.Edge<Integer>> list0 = graph_Vertex0.getEdges();
      Graph.CostPathPair<Integer> graph_CostPathPair0 = new Graph.CostPathPair<Integer>(1, list0);
      graph_CostPathPair0.equals(integer0);
      graph_CostPathPair0.getCost();
      int int0 = 0;
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(0, graph_Vertex0);
      graph_CostVertexPair0.compareTo((Graph.CostVertexPair<Integer>) null);
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(graph_Vertex0);
      Graph.Edge<Integer> graph_Edge0 = graph_Vertex0.getEdge(graph_Vertex1);
      Graph.Edge<Integer> graph_Edge1 = null;
      try {
        graph_Edge1 = new Graph.Edge<Integer>(graph_Edge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CostVertexPair 'p' must be non-NULL.
         //
         verifyException("com.jwetherell.algorithms.data_structures.Graph$CostVertexPair", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      java.util.List<Graph.Edge<Integer>> list0 = graph0.getEdges();
      Graph.CostPathPair<Integer> graph_CostPathPair0 = new Graph.CostPathPair<Integer>(1534, list0);
      graph_CostPathPair0.equals(list0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>((Integer) null, 1905);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(1905, graph_Vertex0);
      graph_CostVertexPair0.compareTo((Graph.CostVertexPair<Integer>) null);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object object0 = new Object();
      Graph<Integer> graph0 = new Graph<Integer>();
      Integer integer0 = new Integer((-1925));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, (-1925));
      graph_Vertex0.getEdges();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Integer integer0 = new Integer(1622);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, (-1605));
      Integer integer1 = new Integer(1);
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(integer1, 1622);
      graph_Vertex0.compareTo(graph_Vertex1);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(1622, graph_Vertex0);
      graph_Vertex0.equals(integer0);
      Graph.Vertex<Integer> graph_Vertex2 = graph_CostVertexPair0.getVertex();
      graph_Vertex2.pathTo(graph_Vertex0);
      Graph.TYPE graph_TYPE0 = Graph.TYPE.DIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>(graph_TYPE0);
      Graph<Integer> graph1 = new Graph<Integer>(graph0);
      graph1.getType();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Integer integer0 = new Integer(89);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 89);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(89, graph_Vertex0, graph_Vertex0);
      Integer integer1 = new Integer(60);
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(integer1);
      graph_Vertex0.compareTo(graph_Vertex1);
      graph_Vertex0.addEdge(graph_Edge0);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>(graph_Edge0);
      graph_Edge0.setCost(89);
      Graph.Edge<Integer> graph_Edge2 = new Graph.Edge<Integer>(graph_Edge1);
      graph_Edge1.compareTo(graph_Edge2);
      graph_Edge2.compareTo(graph_Edge1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Integer integer0 = new Integer(89);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(89, graph_Vertex0, graph_Vertex0);
      graph_Edge0.equals((Object) null);
      Graph<Integer> graph0 = new Graph<Integer>();
      graph0.equals(graph_Edge0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, (-2265));
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(graph_Vertex0);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(0, graph_Vertex1, graph_Vertex1);
      graph_Edge0.equals(integer0);
      graph_Vertex0.compareTo(graph_Vertex1);
      graph_Vertex1.getEdge(graph_Vertex0);
      Graph.Vertex<Integer> graph_Vertex2 = graph_Edge0.getToVertex();
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(1, graph_Vertex2);
      Graph.CostVertexPair<Integer> graph_CostVertexPair1 = new Graph.CostVertexPair<Integer>(0, graph_Vertex0);
      graph_CostVertexPair0.compareTo(graph_CostVertexPair1);
      graph_Vertex1.equals(graph_Vertex2);
      graph_Edge0.toString();
      Graph.CostVertexPair<Integer> graph_CostVertexPair2 = new Graph.CostVertexPair<Integer>((-1), graph_Vertex0);
      graph_CostVertexPair0.compareTo(graph_CostVertexPair2);
      graph_CostVertexPair0.getCost();
      graph_Vertex2.compareTo(graph_Vertex0);
      Graph.TYPE graph_TYPE0 = Graph.TYPE.UNDIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>(graph_TYPE0);
      Integer integer1 = new Integer((-2265));
      graph_Edge0.equals(integer1);
      graph0.getEdges();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Graph.TYPE.values();
      Integer integer0 = Integer.valueOf((-781));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, (-781));
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>((-781), graph_Vertex0);
      graph_CostVertexPair0.getCost();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      int int0 = 2231;
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(2231, (Graph.Vertex<Integer>) null);
      int int1 = null;
      try {
        int1 = new Integer(int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // vertex cannot be NULL.
         //
         verifyException("com.jwetherell.algorithms.data_structures.Graph$CostVertexPair", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = (-1);
      Graph.Vertex<Integer> graph_Vertex0 = null;
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = null;
      try {
        graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>((-1), (Graph.Vertex<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // vertex cannot be NULL.
         //
         verifyException("com.jwetherell.algorithms.data_structures.Graph$CostVertexPair", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>((-1370), (Graph.Vertex<Integer>) null, (Graph.Vertex<Integer>) null);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>(graph_Edge0);
      // Undeclared exception!
      try { 
        graph_Edge1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Both 'to' and 'from' vertices need to be non-NULL.
         //
         verifyException("com.jwetherell.algorithms.data_structures.Graph$Edge", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(4330, (Graph.Vertex<Integer>) null, (Graph.Vertex<Integer>) null);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>(graph_Edge0);
      // Undeclared exception!
      try { 
        graph_Edge1.getToVertex();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Both 'to' and 'from' vertices need to be non-NULL.
         //
         verifyException("com.jwetherell.algorithms.data_structures.Graph$Edge", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Graph.TYPE graph_TYPE0 = Graph.TYPE.DIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>(graph_TYPE0);
      graph0.hashCode();
      Graph<Integer> graph1 = new Graph<Integer>(graph0);
      graph1.toString();
      Graph<Integer> graph2 = new Graph<Integer>(graph1);
      java.util.List<Graph.Vertex<Integer>> list0 = graph1.getVertices();
      java.util.List<Graph.Edge<Integer>> list1 = graph0.getEdges();
      Graph.CostPathPair<Integer> graph_CostPathPair0 = new Graph.CostPathPair<Integer>((-1), list1);
      java.util.List<Graph.Edge<Integer>> list2 = graph_CostPathPair0.getPath();
      Graph<Integer> graph3 = new Graph<Integer>(graph_TYPE0, list0, list2);
      graph2.equals(graph3);
      graph1.toString();
      graph0.getEdges();
      Integer integer0 = new Integer((-1714));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(848, graph_Vertex0);
      Graph.Vertex<Integer> graph_Vertex1 = graph_CostVertexPair0.getVertex();
      Graph.CostVertexPair<Integer> graph_CostVertexPair1 = new Graph.CostVertexPair<Integer>((-1614), graph_Vertex0);
      graph_CostVertexPair0.compareTo(graph_CostVertexPair1);
      graph_Vertex1.getEdges();
      Graph<Integer> graph4 = new Graph<Integer>(graph_TYPE0, list0, list2);
      graph_CostVertexPair0.equals(graph4);
      graph2.hashCode();
      graph_CostPathPair0.getCost();
      graph_CostVertexPair0.getVertex();
      Object object0 = new Object();
      graph0.equals(object0);
      graph3.getEdges();
      graph4.toString();
      graph2.getEdges();
      graph_Vertex1.setWeight((-1714));
      graph_CostVertexPair1.toString();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Collection<Graph.Vertex<Integer>> collection0 = null;
      Graph.TYPE graph_TYPE0 = Graph.TYPE.DIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>(graph_TYPE0, (Collection<Graph.Vertex<Integer>>) null, (Collection<Graph.Edge<Integer>>) null);
      // Undeclared exception!
      try { 
        graph0.getEdges();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer integer0 = new Integer(109);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, (-4));
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(109, graph_Vertex0);
      graph_CostVertexPair0.toString();
      Graph.CostVertexPair<Integer> graph_CostVertexPair1 = new Graph.CostVertexPair<Integer>((-1201), graph_Vertex0);
      graph_CostVertexPair1.toString();
      graph_CostVertexPair0.compareTo(graph_CostVertexPair1);
      graph_Vertex0.getValue();
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>((-434), graph_Vertex0, graph_Vertex0);
      Graph.Vertex<Integer> graph_Vertex1 = graph_CostVertexPair1.getVertex();
      graph_Vertex0.addEdge(graph_Edge0);
      Graph.Edge<Integer> graph_Edge1 = graph_Vertex0.getEdge(graph_Vertex1);
      graph_Vertex0.addEdge(graph_Edge1);
      graph_Edge0.toString();
      Graph.Edge<Integer> graph_Edge2 = new Graph.Edge<Integer>(graph_Edge0);
      graph_Vertex0.addEdge(graph_Edge1);
      Graph.Edge<Integer> graph_Edge3 = new Graph.Edge<Integer>(graph_Edge2);
      graph_Edge0.compareTo(graph_Edge3);
      graph_Edge3.setCost(0);
      graph_Edge3.setCost((-1));
      java.util.List<Graph.Edge<Integer>> list0 = graph_Vertex0.getEdges();
      Graph.CostPathPair<Integer> graph_CostPathPair0 = new Graph.CostPathPair<Integer>((-434), list0);
      graph_CostPathPair0.toString();
      graph_CostPathPair0.setCost(1);
      graph_Edge3.toString();
      graph_Vertex0.setWeight(2960);
      graph_CostPathPair0.setCost((-434));
      graph_CostPathPair0.toString();
      graph_CostPathPair0.toString();
      Graph.CostPathPair<Integer> graph_CostPathPair1 = new Graph.CostPathPair<Integer>(1, list0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      java.util.List<Graph.Edge<Integer>> list0 = graph0.getEdges();
      Graph.CostPathPair<Integer> graph_CostPathPair0 = new Graph.CostPathPair<Integer>(1534, list0);
      graph_CostPathPair0.setCost(1534);
      graph_CostPathPair0.equals(graph_CostPathPair0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Integer integer0 = new Integer(89);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 89);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(89, graph_Vertex0, graph_Vertex0);
      graph_Vertex0.addEdge(graph_Edge0);
      graph_Edge0.equals(graph_Edge0);
      Graph<Integer> graph0 = new Graph<Integer>();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 0);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(0, graph_Vertex0, graph_Vertex0);
      Graph.Vertex<Integer> graph_Vertex1 = graph_Edge0.getToVertex();
      graph_Vertex1.addEdge(graph_Edge0);
      Graph.Edge<Integer> graph_Edge1 = graph_Vertex0.getEdge(graph_Vertex1);
      Graph.TYPE graph_TYPE0 = Graph.TYPE.DIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>(graph_TYPE0);
      graph0.toString();
      graph0.getVertices();
      java.util.List<Graph.Edge<Integer>> list0 = graph_Vertex0.getEdges();
      java.util.List<Graph.Vertex<Integer>> list1 = graph0.getVertices();
      Graph<Integer> graph1 = new Graph<Integer>(graph_TYPE0, list1, list0);
      Graph.CostPathPair<Integer> graph_CostPathPair0 = new Graph.CostPathPair<Integer>(0, list0);
      graph_CostPathPair0.toString();
      graph_CostPathPair0.equals(integer0);
      graph_Edge1.compareTo(graph_Edge0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      java.util.List<Graph.Edge<Integer>> list0 = graph0.getEdges();
      Graph.CostPathPair<Integer> graph_CostPathPair0 = new Graph.CostPathPair<Integer>(1534, list0);
      graph_CostPathPair0.toString();
      graph_CostPathPair0.equals(graph_CostPathPair0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Integer integer0 = new Integer(89);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 89);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(89, graph_Vertex0, graph_Vertex0);
      graph_Vertex0.addEdge(graph_Edge0);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>(graph_Edge0);
      Graph.Edge<Integer> graph_Edge2 = new Graph.Edge<Integer>(graph_Edge1);
      graph_Edge1.compareTo(graph_Edge2);
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(integer0);
      graph_Vertex0.getEdge(graph_Vertex1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Graph.TYPE graph_TYPE0 = Graph.TYPE.DIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>(graph_TYPE0);
      graph0.equals(graph_TYPE0);
      graph0.getType();
      Integer integer0 = new Integer(1695);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, (-1078));
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(0, graph_Vertex0, graph_Vertex0);
      Graph.Vertex<Integer> graph_Vertex1 = graph_Edge0.getToVertex();
      graph_Vertex0.addEdge(graph_Edge0);
      Graph.Edge<Integer> graph_Edge1 = graph_Vertex1.getEdge(graph_Vertex0);
      Graph.Edge<Integer> graph_Edge2 = new Graph.Edge<Integer>(graph_Edge1);
      graph_Edge2.setCost(1695);
      Graph.Vertex<Integer> graph_Vertex2 = graph_Edge2.getFromVertex();
      graph_Vertex2.getEdge(graph_Vertex0);
      graph_Edge0.setCost(0);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(31, graph_Vertex2);
      graph_CostVertexPair0.toString();
      graph_Edge0.setCost(0);
      java.util.List<Graph.Edge<Integer>> list0 = graph_Vertex0.getEdges();
      Graph.CostPathPair<Integer> graph_CostPathPair0 = new Graph.CostPathPair<Integer>((-592), list0);
      Object object0 = new Object();
      graph_CostPathPair0.equals(object0);
      graph_Edge2.setCost((-1));
      Graph.CostVertexPair<Integer> graph_CostVertexPair1 = new Graph.CostVertexPair<Integer>((-592), graph_Vertex1);
      graph_CostVertexPair1.compareTo(graph_CostVertexPair0);
      graph_CostVertexPair0.compareTo(graph_CostVertexPair1);
      graph_Edge2.equals(graph0);
      graph_Edge0.getCost();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer integer0 = new Integer(89);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 89);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(89, graph_Vertex0, graph_Vertex0);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>(graph_Edge0);
      graph_Edge1.equals(graph_Edge0);
      Graph.Edge<Integer> graph_Edge2 = new Graph.Edge<Integer>(graph_Edge1);
      Object object0 = new Object();
      graph_Edge2.equals(object0);
      Graph<Integer> graph0 = new Graph<Integer>();
      graph_Edge2.getCost();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      Integer integer0 = new Integer((-1106));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 1534);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>((-1106), graph_Vertex0);
      Graph.CostVertexPair<Integer> graph_CostVertexPair1 = new Graph.CostVertexPair<Integer>(1534, graph_Vertex0);
      graph_CostVertexPair0.compareTo(graph_CostVertexPair1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer integer0 = new Integer(556);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 973);
      Integer integer1 = new Integer(848);
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(integer1);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(973, graph_Vertex1);
      Graph.Vertex<Integer> graph_Vertex2 = graph_CostVertexPair0.getVertex();
      Graph.CostVertexPair<Integer> graph_CostVertexPair1 = new Graph.CostVertexPair<Integer>(0, graph_Vertex2);
      graph_CostVertexPair1.compareTo(graph_CostVertexPair0);
      java.util.List<Graph.Edge<Integer>> list0 = graph_Vertex0.getEdges();
      Graph.TYPE graph_TYPE0 = Graph.TYPE.UNDIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>(graph_TYPE0);
      java.util.List<Graph.Vertex<Integer>> list1 = graph0.getVertices();
      Graph<Integer> graph1 = new Graph<Integer>(list1, list0);
      java.util.List<Graph.Vertex<Integer>> list2 = graph1.getVertices();
      Graph<Integer> graph2 = new Graph<Integer>(graph_TYPE0, list2, list0);
      graph_CostVertexPair0.equals(list1);
      graph1.hashCode();
      Graph.CostPathPair<Integer> graph_CostPathPair0 = new Graph.CostPathPair<Integer>((-662), list0);
      graph_CostPathPair0.getCost();
      graph_CostVertexPair1.getVertex();
      Object object0 = new Object();
      graph1.equals((Object) null);
      graph2.getEdges();
      graph1.toString();
      graph1.getEdges();
      graph_Vertex0.setWeight((-662));
      Graph.CostVertexPair<Integer> graph_CostVertexPair2 = new Graph.CostVertexPair<Integer>(0, graph_Vertex2);
      graph_CostVertexPair2.toString();
      graph_CostVertexPair2.toString();
      graph0.hashCode();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      Graph<Integer> graph1 = new Graph<Integer>((Graph<Integer>) null);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Integer integer0 = new Integer(89);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 89);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(89, graph_Vertex0, graph_Vertex0);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>(graph_Edge0);
      Graph.Edge<Integer> graph_Edge2 = new Graph.Edge<Integer>(graph_Edge1);
      graph_Edge2.setCost(3759);
      graph_Edge1.compareTo(graph_Edge2);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Integer integer0 = new Integer(556);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 973);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(0, graph_Vertex0, graph_Vertex0);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>(973, graph_Vertex0, graph_Vertex0);
      graph_Edge0.compareTo(graph_Edge1);
      Graph.Edge<Integer> graph_Edge2 = new Graph.Edge<Integer>(graph_Edge0);
      Graph.Vertex<Integer> graph_Vertex1 = graph_Edge0.getToVertex();
      graph_Vertex0.getEdge(graph_Vertex1);
      Graph.Vertex<Integer> graph_Vertex2 = graph_Edge2.getToVertex();
      Graph.Vertex<Integer> graph_Vertex3 = new Graph.Vertex<Integer>(graph_Vertex2);
      graph_Vertex3.pathTo(graph_Vertex0);
      Graph.TYPE graph_TYPE0 = Graph.TYPE.DIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>();
      java.util.List<Graph.Vertex<Integer>> list0 = graph0.getVertices();
      java.util.List<Graph.Edge<Integer>> list1 = graph0.getEdges();
      Graph.CostPathPair<Integer> graph_CostPathPair0 = new Graph.CostPathPair<Integer>((-1), list1);
      java.util.List<Graph.Edge<Integer>> list2 = graph_CostPathPair0.getPath();
      Graph<Integer> graph1 = new Graph<Integer>(graph_TYPE0, list0, list2);
      graph1.toString();
      graph0.toString();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Integer integer0 = new Integer(556);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 973);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(0, graph_Vertex0, graph_Vertex0);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>(graph_Edge0);
      Graph.Vertex<Integer> graph_Vertex1 = graph_Edge0.getToVertex();
      Graph.Edge<Integer> graph_Edge2 = graph_Vertex0.getEdge(graph_Vertex1);
      Graph.Vertex<Integer> graph_Vertex2 = graph_Edge1.getToVertex();
      Graph.Vertex<Integer> graph_Vertex3 = new Graph.Vertex<Integer>(graph_Vertex2);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(556, graph_Vertex0);
      graph_CostVertexPair0.compareTo(graph_CostVertexPair0);
      Graph.CostVertexPair<Integer> graph_CostVertexPair1 = new Graph.CostVertexPair<Integer>((-1017), graph_Vertex3);
      graph_CostVertexPair0.compareTo(graph_CostVertexPair1);
      Graph<Integer> graph0 = new Graph<Integer>((Collection<Graph.Vertex<Integer>>) null, (Collection<Graph.Edge<Integer>>) null);
      graph0.getEdges();
      graph_Edge0.compareTo(graph_Edge2);
      graph_Edge2.equals(graph_Edge0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Integer integer0 = new Integer((-424));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 1);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(1, graph_Vertex0);
      Graph.CostVertexPair<Integer> graph_CostVertexPair1 = new Graph.CostVertexPair<Integer>(0, graph_Vertex0);
      graph_CostVertexPair0.compareTo(graph_CostVertexPair1);
      graph_Vertex0.toString();
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(integer0, 1);
      graph_Vertex1.compareTo(graph_Vertex0);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>((-385), graph_Vertex0, graph_Vertex1);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>(graph_Edge0);
      Graph.Edge<Integer> graph_Edge2 = new Graph.Edge<Integer>((-385), graph_Vertex0, graph_Vertex1);
      graph_Edge1.equals(graph_Edge2);
      graph_Edge1.getCost();
      graph_Vertex0.toString();
      Graph<Integer> graph0 = new Graph<Integer>();
      java.util.List<Graph.Edge<Integer>> list0 = graph0.getEdges();
      Graph.CostPathPair<Integer> graph_CostPathPair0 = new Graph.CostPathPair<Integer>(1, list0);
      graph_CostVertexPair1.getCost();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, (-2265));
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(graph_Vertex0);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(0, graph_Vertex1, graph_Vertex1);
      graph_Vertex1.setWeight((-553));
      graph_Edge0.equals(integer0);
      graph_Vertex0.compareTo(graph_Vertex1);
      graph_Vertex1.getEdge(graph_Vertex0);
      Graph.Vertex<Integer> graph_Vertex2 = graph_Edge0.getToVertex();
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(1, graph_Vertex2);
      Graph.CostVertexPair<Integer> graph_CostVertexPair1 = new Graph.CostVertexPair<Integer>((-1), graph_Vertex0);
      graph_CostVertexPair0.compareTo(graph_CostVertexPair1);
      graph_Vertex1.equals(graph_Vertex2);
      graph_Edge0.toString();
      Graph.CostVertexPair<Integer> graph_CostVertexPair2 = new Graph.CostVertexPair<Integer>((-1), graph_Vertex0);
      Object object0 = new Object();
      graph_CostVertexPair2.equals(object0);
      graph_CostVertexPair0.compareTo(graph_CostVertexPair2);
      graph_CostVertexPair0.getCost();
      graph_Vertex2.compareTo(graph_Vertex0);
      Graph.TYPE graph_TYPE0 = Graph.TYPE.UNDIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>(graph_TYPE0);
      Integer integer1 = new Integer(1);
      graph_CostVertexPair0.compareTo(graph_CostVertexPair2);
      graph0.getEdges();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      graph_Vertex0.setWeight((-308));
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(integer0);
      graph_Vertex0.compareTo(graph_Vertex1);
      graph_Vertex1.equals(graph_Vertex0);
      graph_Vertex0.getEdge(graph_Vertex1);
      Graph<Integer> graph0 = new Graph<Integer>((Graph<Integer>) null);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Integer integer0 = new Integer((-975));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(integer0, 282);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(282, graph_Vertex0, graph_Vertex1);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>(graph_Edge0);
      graph_Vertex0.addEdge(graph_Edge1);
      Graph.Edge<Integer> graph_Edge2 = graph_Vertex0.getEdge(graph_Vertex1);
      graph_Vertex0.equals(graph_Edge0);
      Graph.Edge<Integer> graph_Edge3 = new Graph.Edge<Integer>(graph_Edge2);
      graph_Edge0.setCost((-189));
      Graph.Vertex<Integer> graph_Vertex2 = graph_Edge3.getToVertex();
      graph_Edge3.compareTo(graph_Edge0);
      Graph.Edge<Integer> graph_Edge4 = new Graph.Edge<Integer>(282, graph_Vertex2, graph_Vertex0);
      graph_Edge4.compareTo(graph_Edge3);
      graph_Edge4.getToVertex();
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(1, graph_Vertex2);
      graph_CostVertexPair0.compareTo(graph_CostVertexPair0);
      graph_Vertex1.equals(graph_Vertex0);
      Graph<Integer> graph0 = new Graph<Integer>();
      graph0.getEdges();
      Graph.Edge<Integer> graph_Edge5 = new Graph.Edge<Integer>(graph_Edge2);
      graph_Edge3.compareTo(graph_Edge5);
      Graph.Vertex<Integer> graph_Vertex3 = graph_Edge1.getFromVertex();
      Graph.Edge<Integer> graph_Edge6 = new Graph.Edge<Integer>(2, graph_Vertex0, graph_Vertex3);
      Object object0 = new Object();
      graph_Edge6.equals(object0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Graph.TYPE graph_TYPE0 = Graph.TYPE.DIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>(graph_TYPE0);
      graph0.hashCode();
      Graph<Integer> graph1 = new Graph<Integer>(graph0);
      graph1.toString();
      Graph<Integer> graph2 = new Graph<Integer>(graph1);
      Integer integer0 = new Integer((-2083));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(graph_Vertex0);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>((-2083), graph_Vertex1);
      Graph.CostVertexPair<Integer> graph_CostVertexPair1 = new Graph.CostVertexPair<Integer>((-2083), graph_Vertex0);
      graph_CostVertexPair0.compareTo(graph_CostVertexPair1);
      graph_Vertex1.toString();
      Integer integer1 = new Integer((-75));
      Graph.Vertex<Integer> graph_Vertex2 = new Graph.Vertex<Integer>(integer1, 0);
      graph_Vertex0.compareTo(graph_Vertex2);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>((-1017), graph_Vertex1, graph_Vertex0);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>(graph_Edge0);
      Graph.Edge<Integer> graph_Edge2 = new Graph.Edge<Integer>((-75), graph_Vertex0, graph_Vertex2);
      graph_Edge1.equals(graph0);
      graph_Edge1.getCost();
      graph_Vertex1.toString();
      Graph<Integer> graph3 = new Graph<Integer>();
      java.util.List<Graph.Edge<Integer>> list0 = graph3.getEdges();
      Graph.CostPathPair<Integer> graph_CostPathPair0 = new Graph.CostPathPair<Integer>((-1190), list0);
      graph_CostVertexPair0.getCost();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Integer integer0 = new Integer(89);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 89);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(89, graph_Vertex0, graph_Vertex0);
      graph_Vertex0.addEdge(graph_Edge0);
      Graph.TYPE graph_TYPE0 = Graph.TYPE.DIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>();
      java.util.List<Graph.Vertex<Integer>> list0 = graph0.getVertices();
      java.util.List<Graph.Edge<Integer>> list1 = graph_Vertex0.getEdges();
      Graph<Integer> graph1 = new Graph<Integer>(graph_TYPE0, list0, list1);
      graph0.hashCode();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 1150);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(0, graph_Vertex0, graph_Vertex0);
      Graph.Vertex<Integer> graph_Vertex1 = graph_Edge0.getToVertex();
      graph_Vertex1.addEdge(graph_Edge0);
      graph_Vertex0.getEdge(graph_Vertex1);
      Graph.TYPE graph_TYPE0 = Graph.TYPE.DIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>(graph_TYPE0);
      java.util.List<Graph.Vertex<Integer>> list0 = graph0.getVertices();
      java.util.List<Graph.Edge<Integer>> list1 = graph_Vertex0.getEdges();
      Graph<Integer> graph1 = new Graph<Integer>(list0, list1);
      java.util.List<Graph.Vertex<Integer>> list2 = graph1.getVertices();
      Graph<Integer> graph2 = new Graph<Integer>(graph_TYPE0, list2, list1);
      java.util.List<Graph.Vertex<Integer>> list3 = graph2.getVertices();
      Graph<Integer> graph3 = new Graph<Integer>(graph2);
      java.util.List<Graph.Edge<Integer>> list4 = graph3.getEdges();
      java.util.List<Graph.Vertex<Integer>> list5 = graph1.getVertices();
      Graph<Integer> graph4 = new Graph<Integer>(list5, list4);
      Graph.TYPE graph_TYPE1 = Graph.TYPE.DIRECTED;
      java.util.List<Graph.Vertex<Integer>> list6 = graph0.getVertices();
      Graph<Integer> graph5 = new Graph<Integer>(graph_TYPE0, list3, list4);
      java.util.List<Graph.Edge<Integer>> list7 = graph_Vertex0.getEdges();
      Graph<Integer> graph6 = new Graph<Integer>(graph_TYPE1, list6, list7);
      Object object0 = new Object();
      graph6.equals(object0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Integer integer0 = new Integer((-975));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(integer0, 282);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(282, graph_Vertex0, graph_Vertex1);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>(graph_Edge0);
      graph_Vertex0.addEdge(graph_Edge1);
      Graph.Edge<Integer> graph_Edge2 = graph_Vertex0.getEdge(graph_Vertex1);
      graph_Vertex0.equals(graph_Edge0);
      Graph.Edge<Integer> graph_Edge3 = new Graph.Edge<Integer>(graph_Edge2);
      graph_Edge0.setCost((-189));
      Graph.Vertex<Integer> graph_Vertex2 = graph_Edge3.getToVertex();
      graph_Edge3.compareTo(graph_Edge0);
      Graph.Edge<Integer> graph_Edge4 = new Graph.Edge<Integer>(282, graph_Vertex2, graph_Vertex0);
      graph_Edge4.compareTo(graph_Edge3);
      Graph.Vertex<Integer> graph_Vertex3 = graph_Edge3.getToVertex();
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>((-189), graph_Vertex0);
      Graph.Vertex<Integer> graph_Vertex4 = graph_Edge2.getFromVertex();
      Graph.CostVertexPair<Integer> graph_CostVertexPair1 = new Graph.CostVertexPair<Integer>(1, graph_Vertex4);
      graph_CostVertexPair1.compareTo(graph_CostVertexPair0);
      graph_Vertex1.equals(graph_CostVertexPair0);
      Graph<Integer> graph0 = new Graph<Integer>();
      graph0.getEdges();
      Graph.Edge<Integer> graph_Edge5 = new Graph.Edge<Integer>(graph_Edge3);
      Graph.Edge<Integer> graph_Edge6 = new Graph.Edge<Integer>(282, graph_Vertex3, graph_Vertex1);
      graph_Edge3.compareTo(graph_Edge6);
      graph_Edge2.getFromVertex();
      Graph.Edge<Integer> graph_Edge7 = new Graph.Edge<Integer>(282, graph_Vertex0, graph_Vertex2);
      Graph.TYPE.values();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Integer integer0 = new Integer(89);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 89);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(89, graph_Vertex0, graph_Vertex0);
      graph_Vertex0.addEdge(graph_Edge0);
      Graph.TYPE graph_TYPE0 = Graph.TYPE.DIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>();
      java.util.List<Graph.Vertex<Integer>> list0 = graph0.getVertices();
      java.util.List<Graph.Edge<Integer>> list1 = graph_Vertex0.getEdges();
      Graph<Integer> graph1 = new Graph<Integer>(graph_TYPE0, list0, list1);
      graph1.hashCode();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 1150);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(0, graph_Vertex0, graph_Vertex0);
      Graph.Vertex<Integer> graph_Vertex1 = graph_Edge0.getToVertex();
      graph_Vertex1.addEdge(graph_Edge0);
      graph_Vertex0.getEdge(graph_Vertex1);
      Graph.TYPE graph_TYPE0 = Graph.TYPE.DIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>(graph_TYPE0);
      graph0.toString();
      java.util.List<Graph.Vertex<Integer>> list0 = graph0.getVertices();
      java.util.List<Graph.Edge<Integer>> list1 = graph_Vertex0.getEdges();
      Graph<Integer> graph1 = new Graph<Integer>(list0, list1);
      java.util.List<Graph.Vertex<Integer>> list2 = graph1.getVertices();
      Graph<Integer> graph2 = new Graph<Integer>(graph_TYPE0, list2, list1);
      java.util.List<Graph.Vertex<Integer>> list3 = graph2.getVertices();
      Graph<Integer> graph3 = new Graph<Integer>(graph2);
      java.util.List<Graph.Edge<Integer>> list4 = graph3.getEdges();
      java.util.List<Graph.Vertex<Integer>> list5 = graph1.getVertices();
      Graph<Integer> graph4 = new Graph<Integer>(list5, list4);
      Graph.TYPE graph_TYPE1 = Graph.TYPE.DIRECTED;
      java.util.List<Graph.Vertex<Integer>> list6 = graph0.getVertices();
      Graph<Integer> graph5 = new Graph<Integer>(graph_TYPE0, list3, list4);
      java.util.List<Graph.Edge<Integer>> list7 = graph_Vertex0.getEdges();
      Graph<Integer> graph6 = new Graph<Integer>(graph_TYPE1, list6, list7);
      Object object0 = new Object();
      graph6.equals(object0);
      graph2.hashCode();
      Graph.CostPathPair<Integer> graph_CostPathPair0 = new Graph.CostPathPair<Integer>(0, list7);
      graph_CostPathPair0.equals(list7);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Integer integer0 = new Integer(89);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 89);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(89, graph_Vertex0, graph_Vertex0);
      graph_Vertex0.addEdge(graph_Edge0);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>(graph_Edge0);
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(integer0);
      graph_Vertex0.pathTo(graph_Vertex1);
      Graph.Edge<Integer> graph_Edge2 = new Graph.Edge<Integer>(graph_Edge1);
      graph_Edge1.compareTo(graph_Edge2);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Integer integer0 = new Integer((-1188));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(Integer.MAX_VALUE, graph_Vertex0, graph_Vertex0);
      graph_Vertex0.addEdge(graph_Edge0);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>(graph_Edge0);
      graph_Edge0.getToVertex();
      graph_Edge1.getToVertex();
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(graph_Vertex0);
      graph_Vertex0.pathTo((Graph.Vertex<Integer>) null);
      Graph.TYPE graph_TYPE0 = Graph.TYPE.DIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>(graph_TYPE0);
      graph0.getType();
      graph_Edge1.compareTo(graph_Edge0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Integer integer0 = new Integer((-424));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 1);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(1, graph_Vertex0);
      Graph.CostVertexPair<Integer> graph_CostVertexPair1 = new Graph.CostVertexPair<Integer>((-424), graph_Vertex0);
      graph_Vertex0.toString();
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(integer0, 1);
      graph_Vertex1.compareTo(graph_Vertex0);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>((-975), graph_Vertex0, graph_Vertex0);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>(graph_Edge0);
      Graph.Edge<Integer> graph_Edge2 = new Graph.Edge<Integer>((-277), graph_Vertex1, graph_Vertex0);
      graph_Edge0.equals(graph_Edge2);
      graph_Edge0.getCost();
      graph_Vertex0.toString();
      Graph<Integer> graph0 = new Graph<Integer>();
      graph0.getEdges();
      Graph.CostVertexPair<Integer> graph_CostVertexPair2 = new Graph.CostVertexPair<Integer>(Integer.MAX_VALUE, graph_Vertex0);
      graph_CostVertexPair2.getCost();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Integer integer0 = new Integer(89);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(89, graph_Vertex0, graph_Vertex0);
      graph_Edge0.toString();
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>((-1098), graph_Vertex0, graph_Vertex0);
      graph_Vertex0.equals(graph_Edge1);
      Graph.Edge<Integer> graph_Edge2 = new Graph.Edge<Integer>(graph_Edge1);
      graph_Edge0.equals(graph_Edge1);
      Graph.Edge<Integer> graph_Edge3 = new Graph.Edge<Integer>(graph_Edge0);
      Graph<Integer> graph0 = new Graph<Integer>();
      graph0.hashCode();
      graph_Edge1.equals((Object) null);
      graph_Vertex0.pathTo((Graph.Vertex<Integer>) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Integer integer0 = new Integer(89);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 89);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(89, graph_Vertex0, graph_Vertex0);
      graph_Vertex0.addEdge(graph_Edge0);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>(graph_Edge0);
      graph_Edge1.equals(graph_Edge0);
      Graph.Edge<Integer> graph_Edge2 = new Graph.Edge<Integer>(graph_Edge1);
      graph_Edge1.compareTo(graph_Edge2);
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(graph_Vertex0);
      graph_Vertex0.pathTo(graph_Vertex1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(1669, graph_Vertex0, graph_Vertex0);
      graph_Vertex0.addEdge(graph_Edge0);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>(graph_Edge0);
      graph_Edge0.getToVertex();
      Graph.Vertex<Integer> graph_Vertex1 = graph_Edge1.getToVertex();
      Graph.Vertex<Integer> graph_Vertex2 = new Graph.Vertex<Integer>(graph_Vertex1);
      Graph.Vertex<Integer> graph_Vertex3 = new Graph.Vertex<Integer>(graph_Vertex2);
      graph_Vertex3.pathTo(graph_Vertex1);
      Graph.TYPE graph_TYPE0 = Graph.TYPE.DIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>(graph_TYPE0);
      graph0.getType();
      graph_Edge0.compareTo((Graph.Edge<Integer>) null);
      int int0 = (-1);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(int0, graph_Vertex2);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 1150);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(0, graph_Vertex0, graph_Vertex0);
      Graph.Vertex<Integer> graph_Vertex1 = graph_Edge0.getToVertex();
      graph_Vertex1.addEdge(graph_Edge0);
      graph_Vertex0.getEdge(graph_Vertex1);
      Graph.TYPE graph_TYPE0 = Graph.TYPE.DIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>(graph_TYPE0);
      graph0.toString();
      java.util.List<Graph.Vertex<Integer>> list0 = graph0.getVertices();
      java.util.List<Graph.Edge<Integer>> list1 = graph_Vertex0.getEdges();
      Graph<Integer> graph1 = new Graph<Integer>(list0, list1);
      java.util.List<Graph.Vertex<Integer>> list2 = graph1.getVertices();
      Graph<Integer> graph2 = new Graph<Integer>(graph_TYPE0, list2, list1);
      java.util.List<Graph.Vertex<Integer>> list3 = graph2.getVertices();
      Graph<Integer> graph3 = new Graph<Integer>(graph2);
      java.util.List<Graph.Edge<Integer>> list4 = graph0.getEdges();
      graph1.getVertices();
      java.util.List<Graph.Vertex<Integer>> list5 = graph0.getVertices();
      Graph<Integer> graph4 = new Graph<Integer>(graph_TYPE0, list3, list4);
      java.util.List<Graph.Edge<Integer>> list6 = graph_Vertex0.getEdges();
      Graph<Integer> graph5 = new Graph<Integer>(graph_TYPE0, list5, list6);
      graph1.getEdges();
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(0, graph_Vertex1);
      graph_CostVertexPair0.getCost();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      graph0.toString();
      graph0.getVertices();
      Graph.TYPE.values();
      graph0.hashCode();
      Integer integer0 = new Integer((-2094));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>((-2094), graph_Vertex0);
      Graph.Vertex<Integer> graph_Vertex1 = graph_CostVertexPair0.getVertex();
      graph_Vertex0.compareTo(graph_Vertex1);
      Graph.CostVertexPair<Integer> graph_CostVertexPair1 = new Graph.CostVertexPair<Integer>((-2094), graph_Vertex0);
      Graph.CostVertexPair<Integer> graph_CostVertexPair2 = new Graph.CostVertexPair<Integer>((-2094), graph_Vertex0);
      java.util.List<Graph.Edge<Integer>> list0 = graph0.getEdges();
      Graph.CostPathPair<Integer> graph_CostPathPair0 = new Graph.CostPathPair<Integer>((-2094), list0);
      java.util.List<Graph.Edge<Integer>> list1 = graph_CostPathPair0.getPath();
      Graph.CostPathPair<Integer> graph_CostPathPair1 = new Graph.CostPathPair<Integer>(1545, list1);
      graph_CostPathPair0.equals(graph_CostPathPair1);
      graph0.hashCode();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      Graph.TYPE.values();
      graph0.hashCode();
      Integer integer0 = new Integer((-2094));
      java.util.List<Graph.Edge<Integer>> list0 = graph0.getEdges();
      Graph.CostPathPair<Integer> graph_CostPathPair0 = new Graph.CostPathPair<Integer>(1545, list0);
      java.util.List<Graph.Edge<Integer>> list1 = graph_CostPathPair0.getPath();
      Graph.CostPathPair<Integer> graph_CostPathPair1 = new Graph.CostPathPair<Integer>(1545, list1);
      graph_CostPathPair0.equals(graph_CostPathPair1);
      graph0.hashCode();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 0);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>((-975), graph_Vertex0, graph_Vertex0);
      Graph.Vertex<Integer> graph_Vertex1 = graph_Edge0.getToVertex();
      graph_Vertex1.addEdge(graph_Edge0);
      graph_Vertex1.getEdge(graph_Vertex0);
      Graph.TYPE graph_TYPE0 = Graph.TYPE.DIRECTED;
      Graph.TYPE graph_TYPE1 = Graph.TYPE.DIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>(graph_TYPE1);
      graph0.toString();
      graph0.getVertices();
      java.util.List<Graph.Edge<Integer>> list0 = graph_Vertex0.getEdges();
      graph0.getVertices();
      java.util.List<Graph.Vertex<Integer>> list1 = graph0.getVertices();
      Graph<Integer> graph1 = new Graph<Integer>(graph_TYPE0, list1, list0);
      java.util.List<Graph.Vertex<Integer>> list2 = graph0.getVertices();
      Graph<Integer> graph2 = new Graph<Integer>(graph1);
      java.util.List<Graph.Edge<Integer>> list3 = graph2.getEdges();
      graph0.getVertices();
      Graph<Integer> graph3 = new Graph<Integer>(list1, list0);
      graph1.getVertices();
      Graph.TYPE graph_TYPE2 = Graph.TYPE.UNDIRECTED;
      graph_Vertex1.getEdges();
      Graph<Integer> graph4 = new Graph<Integer>(graph_TYPE2, list2, list3);
      Object object0 = new Object();
      Integer integer1 = new Integer(414);
      graph1.equals(integer1);
      graph3.hashCode();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, (-2265));
      graph_Vertex0.compareTo(graph_Vertex0);
      graph_Vertex0.getEdge(graph_Vertex0);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(0, graph_Vertex0);
      graph_Vertex0.addEdge((Graph.Edge<Integer>) null);
      graph_Vertex0.equals(graph_Vertex0);
      graph_Vertex0.compareTo(graph_Vertex0);
      Graph.TYPE graph_TYPE0 = Graph.TYPE.UNDIRECTED;
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      Integer integer0 = new Integer(2338);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(2338, graph_Vertex0, graph_Vertex0);
      graph_Vertex0.addEdge(graph_Edge0);
      graph_Edge0.getToVertex();
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(integer0);
      Graph.Vertex<Integer> graph_Vertex2 = new Graph.Vertex<Integer>(graph_Vertex1);
      Graph.TYPE graph_TYPE0 = Graph.TYPE.DIRECTED;
      Graph<Integer> graph1 = new Graph<Integer>(graph_TYPE0);
      graph1.getType();
      graph_Vertex1.compareTo(graph_Vertex0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 0);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(0, graph_Vertex0, graph_Vertex0);
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(integer0, 0);
      graph_Vertex1.addEdge(graph_Edge0);
      graph_Vertex0.getEdge(graph_Vertex1);
      Graph.TYPE graph_TYPE0 = Graph.TYPE.UNDIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>(graph_TYPE0);
      graph0.toString();
      Graph<Integer> graph1 = new Graph<Integer>(graph0);
      graph0.hashCode();
      graph0.toString();
      graph_Vertex0.compareTo(graph_Vertex1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(Integer.MAX_VALUE, graph_Vertex0, graph_Vertex0);
      graph_Vertex0.addEdge(graph_Edge0);
      Graph.Vertex<Integer> graph_Vertex1 = graph_Edge0.getToVertex();
      Graph.Vertex<Integer> graph_Vertex2 = new Graph.Vertex<Integer>(graph_Vertex1);
      Graph<Integer> graph0 = new Graph<Integer>((Graph.TYPE) null);
      graph0.getType();
      graph_Vertex2.compareTo(graph_Vertex0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Integer integer0 = new Integer((-424));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 1);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(1, graph_Vertex0);
      Graph.CostVertexPair<Integer> graph_CostVertexPair1 = new Graph.CostVertexPair<Integer>((-424), graph_Vertex0);
      graph_Vertex0.toString();
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(integer0);
      graph_Vertex1.compareTo(graph_Vertex0);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>((-385), graph_Vertex0, graph_Vertex1);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>((-385), graph_Vertex0, graph_Vertex0);
      graph_Edge0.compareTo(graph_Edge1);
      Graph.Edge<Integer> graph_Edge2 = new Graph.Edge<Integer>(graph_Edge0);
      graph_Edge2.equals(graph_Edge2);
      graph_Edge0.toString();
      Graph<Integer> graph0 = new Graph<Integer>();
      graph0.hashCode();
      Graph.TYPE.valueOf("Value=-424 weight=1\n");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Integer integer0 = new Integer(1);
      Integer.getInteger("com.jwetherell.algorithms.data_structures.Graph$Vertex");
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>((Integer) null, (-1937));
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(integer0, 1);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>((-1), graph_Vertex1, graph_Vertex0);
      Graph.Vertex<Integer> graph_Vertex2 = new Graph.Vertex<Integer>(integer0);
      graph_Vertex1.addEdge(graph_Edge0);
      graph_Vertex1.getEdge(graph_Vertex2);
      Graph.TYPE graph_TYPE0 = Graph.TYPE.UNDIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>(graph_TYPE0);
      graph0.toString();
      java.util.List<Graph.Vertex<Integer>> list0 = graph0.getVertices();
      java.util.List<Graph.Edge<Integer>> list1 = graph_Vertex0.getEdges();
      graph0.getVertices();
      Graph.TYPE graph_TYPE1 = Graph.TYPE.UNDIRECTED;
      Graph<Integer> graph1 = new Graph<Integer>(graph_TYPE1, list0, list1);
      Graph.CostPathPair<Integer> graph_CostPathPair0 = new Graph.CostPathPair<Integer>((-1397), list1);
      Object object0 = new Object();
      graph_CostPathPair0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      Integer integer0 = new Integer((-1403));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, (-1403));
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>((-1), graph_Vertex0);
      Graph.CostVertexPair<Integer> graph_CostVertexPair1 = new Graph.CostVertexPair<Integer>((-1), graph_Vertex0);
      graph_CostVertexPair0.compareTo(graph_CostVertexPair1);
      Graph.CostVertexPair<Integer> graph_CostVertexPair2 = new Graph.CostVertexPair<Integer>((-1403), graph_Vertex0);
      graph_CostVertexPair1.equals(graph_CostVertexPair0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      Integer integer0 = new Integer(2);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 2);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(772, graph_Vertex0);
      Graph.CostVertexPair<Integer> graph_CostVertexPair1 = new Graph.CostVertexPair<Integer>(2, graph_Vertex0);
      graph_CostVertexPair0.compareTo(graph_CostVertexPair1);
      graph_CostVertexPair0.equals(graph_CostVertexPair1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      Integer integer0 = new Integer((-1403));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, (-1403));
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>((-1), graph_Vertex0);
      Graph.CostVertexPair<Integer> graph_CostVertexPair1 = new Graph.CostVertexPair<Integer>((-1), graph_Vertex0);
      graph_CostVertexPair1.compareTo(graph_CostVertexPair0);
      graph_CostVertexPair1.setCost(1669);
      graph_CostVertexPair0.compareTo(graph_CostVertexPair1);
      Graph.CostVertexPair<Integer> graph_CostVertexPair2 = new Graph.CostVertexPair<Integer>((-1403), graph_Vertex0);
      graph_CostVertexPair1.equals(graph_CostVertexPair0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      Integer integer0 = new Integer(31);
      Integer integer1 = new Integer(432);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer1, 472);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(432, graph_Vertex0);
      Graph.CostVertexPair<Integer> graph_CostVertexPair1 = (Graph.CostVertexPair<Integer>) mock(Graph.CostVertexPair.class, new ViolatedAssumptionAnswer());
      graph_CostVertexPair0.compareTo(graph_CostVertexPair1);
      Graph.CostVertexPair<Integer> graph_CostVertexPair2 = new Graph.CostVertexPair<Integer>(Integer.MAX_VALUE, graph_Vertex0);
      graph_CostVertexPair0.equals(graph_CostVertexPair2);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      Integer integer0 = new Integer((-1375));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, (-1375));
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>((-1375), graph_Vertex0, graph_Vertex0);
      graph_Vertex0.addEdge(graph_Edge0);
      Graph.Edge<Integer> graph_Edge1 = new Graph.Edge<Integer>(graph_Edge0);
      Graph.Vertex<Integer> graph_Vertex1 = (Graph.Vertex<Integer>) mock(Graph.Vertex.class, new ViolatedAssumptionAnswer());
      Graph.Edge<Integer> graph_Edge2 = new Graph.Edge<Integer>((-1375), graph_Vertex0, graph_Vertex1);
      graph_Edge2.equals(graph_Edge0);
      Graph.Edge<Integer> graph_Edge3 = new Graph.Edge<Integer>(graph_Edge2);
      Graph.Edge<Integer> graph_Edge4 = new Graph.Edge<Integer>(31, graph_Vertex0, graph_Vertex0);
      graph_Edge4.compareTo(graph_Edge1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Integer integer0 = new Integer(89);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 89);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(89, graph_Vertex0, graph_Vertex0);
      graph_Vertex0.addEdge(graph_Edge0);
      Graph.TYPE graph_TYPE0 = Graph.TYPE.UNDIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>(graph_TYPE0);
      Graph<Integer> graph1 = new Graph<Integer>(graph0);
      java.util.List<Graph.Edge<Integer>> list0 = graph1.getEdges();
      Graph.CostPathPair<Integer> graph_CostPathPair0 = new Graph.CostPathPair<Integer>(89, list0);
      graph0.hashCode();
      graph_CostPathPair0.equals((Object) null);
      graph_Edge0.equals(graph_CostPathPair0);
      Integer integer1 = new Integer(89);
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(integer1, 89);
      graph_Vertex0.getEdge(graph_Vertex1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Graph<Integer> graph0 = new Graph<Integer>();
      Object object0 = new Object();
      graph0.equals(object0);
      Integer integer0 = new Integer((-1908));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>((-1908), graph_Vertex0, graph_Vertex0);
      graph_Vertex0.addEdge(graph_Edge0);
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(graph_Vertex0);
      graph_Vertex1.equals(graph_Vertex0);
      graph0.hashCode();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Integer integer0 = new Integer(89);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 89);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(Integer.MAX_VALUE, graph_Vertex0, graph_Vertex0);
      graph_Vertex0.addEdge(graph_Edge0);
      Graph.TYPE graph_TYPE0 = Graph.TYPE.UNDIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>();
      java.util.List<Graph.Vertex<Integer>> list0 = graph0.getVertices();
      java.util.List<Graph.Edge<Integer>> list1 = graph_Vertex0.getEdges();
      Graph<Integer> graph1 = new Graph<Integer>(graph_TYPE0, list0, list1);
      graph0.hashCode();
      graph0.equals(graph1);
      graph0.getVertices();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>(Integer.MAX_VALUE, graph_Vertex0, graph_Vertex0);
      graph_Vertex0.addEdge(graph_Edge0);
      Graph.Vertex<Integer> graph_Vertex1 = graph_Edge0.getToVertex();
      Graph.Vertex<Integer> graph_Vertex2 = new Graph.Vertex<Integer>(graph_Vertex1);
      Graph<Integer> graph0 = new Graph<Integer>((Graph.TYPE) null);
      graph0.hashCode();
      graph0.getType();
      graph_Vertex2.compareTo(graph_Vertex0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Graph.TYPE graph_TYPE0 = Graph.TYPE.UNDIRECTED;
      Graph<Integer> graph0 = new Graph<Integer>();
      java.util.List<Graph.Vertex<Integer>> list0 = graph0.getVertices();
      Integer integer0 = new Integer((-1054));
      Graph.Vertex<Integer> graph_Vertex0 = new Graph.Vertex<Integer>(integer0, 881);
      Graph.Vertex<Integer> graph_Vertex1 = new Graph.Vertex<Integer>(graph_Vertex0);
      Graph.Edge<Integer> graph_Edge0 = new Graph.Edge<Integer>((-1054), graph_Vertex1, graph_Vertex1);
      graph_Vertex1.addEdge(graph_Edge0);
      graph_Vertex1.compareTo(graph_Vertex0);
      java.util.List<Graph.Edge<Integer>> list1 = graph_Vertex1.getEdges();
      Graph<Integer> graph1 = new Graph<Integer>(graph_TYPE0, list0, list1);
      graph_Vertex0.equals(list0);
      Graph.CostPathPair<Integer> graph_CostPathPair0 = new Graph.CostPathPair<Integer>(881, list1);
      graph_CostPathPair0.equals(graph_Vertex0);
      Graph.CostVertexPair<Integer> graph_CostVertexPair0 = new Graph.CostVertexPair<Integer>(Integer.MAX_VALUE, graph_Vertex1);
      Graph.CostVertexPair<Integer> graph_CostVertexPair1 = new Graph.CostVertexPair<Integer>(141, graph_Vertex1);
      graph_CostVertexPair0.compareTo(graph_CostVertexPair1);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 01 04:47:03 GMT 2025
 */

package com.jwetherell.algorithms.data_structures;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jwetherell.algorithms.data_structures.Matrix;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Matrix_ESTest extends Matrix_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(0, 352);
      String string0 = matrix0.toString();
      assertEquals("Matrix:\n", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(0, 2861);
      Matrix<Integer> matrix1 = matrix0.multiply(matrix0);
      assertEquals(2861, matrix1.getCols());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(0, 0);
      Matrix<Integer> matrix1 = matrix0.subtract(matrix0);
      assertTrue(matrix1.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer[][] integerArray0 = new Integer[7][8];
      Integer[] integerArray1 = new Integer[3];
      Integer integer0 = new Integer((-485));
      integerArray1[2] = integer0;
      Matrix<Integer> matrix0 = new Matrix<Integer>(0, (-485), integerArray0);
      Matrix<Integer> matrix1 = new Matrix<Integer>((-58), (int) integerArray1[2]);
      Matrix<Integer> matrix2 = matrix0.subtract(matrix1);
      assertEquals((-485), matrix2.getCols());
      assertEquals(0, matrix2.getRows());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(0, 0);
      Matrix<Integer> matrix1 = new Matrix<Integer>(0, 6);
      Matrix<Integer> matrix2 = matrix0.subtract(matrix1);
      assertTrue(matrix2.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(0, 0);
      assertEquals(0, matrix0.getCols());
      
      Integer[][] integerArray0 = new Integer[1][7];
      Matrix<Integer> matrix1 = new Matrix<Integer>((-321), 0, integerArray0);
      Matrix<Integer> matrix2 = matrix1.add(matrix0);
      assertEquals((-321), matrix2.getRows());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(1941, 0);
      try { 
        matrix0.identity();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Matrix should be a square
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(31, 2861);
      Matrix<Integer> matrix1 = new Matrix<Integer>(31, 1040);
      Matrix<Integer> matrix2 = matrix0.subtract(matrix1);
      assertEquals(2861, matrix2.getCols());
      assertEquals(31, matrix2.getRows());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(0, 0);
      Integer[][] integerArray0 = new Integer[0][1];
      Matrix<Integer> matrix1 = new Matrix<Integer>(0, 1852, integerArray0);
      Matrix<Integer> matrix2 = matrix0.multiply(matrix1);
      assertEquals(1852, matrix2.getCols());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>((-850), (-850));
      Matrix<Integer> matrix1 = matrix0.multiply(matrix0);
      assertEquals((-850), matrix1.getRows());
      assertEquals((-850), matrix1.getCols());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>((-1), (-1), (Integer[][]) null);
      Matrix<Integer> matrix1 = new Matrix<Integer>(0, 1);
      Matrix<Integer> matrix2 = matrix1.add(matrix0);
      assertEquals((-1), matrix0.getCols());
      assertTrue(matrix2.equals((Object)matrix1));
      assertEquals((-1), matrix0.getRows());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>((-850), (-850));
      Matrix<Integer> matrix1 = matrix0.add(matrix0);
      assertEquals((-850), matrix1.getCols());
      assertEquals((-850), matrix1.getRows());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(0, 2861);
      // Undeclared exception!
      try { 
        matrix0.multiply((Matrix<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>((-850), (-850));
      // Undeclared exception!
      try { 
        matrix0.getRow((-850));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer[][] integerArray0 = new Integer[1][7];
      Matrix<Integer> matrix0 = new Matrix<Integer>((-321), 0, integerArray0);
      // Undeclared exception!
      try { 
        matrix0.getColumn((-1487));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(2301, 0);
      // Undeclared exception!
      try { 
        matrix0.add((Matrix<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Matrix<Integer> matrix0 = null;
      try {
        matrix0 = new Matrix<Integer>(1, 2448, (Integer[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Integer[][] integerArray0 = new Integer[0][5];
      Matrix<Integer> matrix0 = null;
      try {
        matrix0 = new Matrix<Integer>((-13), 358, integerArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Matrix<Integer> matrix0 = null;
      try {
        matrix0 = new Matrix<Integer>(2861, (-3500));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(31, 2861);
      // Undeclared exception!
      matrix0.toString();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>((-850), (-850));
      String string0 = matrix0.toString();
      assertEquals((-850), matrix0.getCols());
      assertEquals("Matrix:\n", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(0, 0);
      Matrix<Integer> matrix1 = new Matrix<Integer>(0, (-510));
      boolean boolean0 = matrix0.equals(matrix1);
      assertFalse(matrix1.equals((Object)matrix0));
      assertFalse(boolean0);
      assertEquals((-510), matrix1.getCols());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(1, 496);
      Object object0 = new Object();
      boolean boolean0 = matrix0.equals(object0);
      assertEquals(496, matrix0.getCols());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(31, 31);
      // Undeclared exception!
      try { 
        matrix0.hashCode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(0, 2861);
      matrix0.hashCode();
      assertEquals(2861, matrix0.getCols());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(0, 0);
      Matrix<Integer> matrix1 = matrix0.multiply(matrix0);
      assertTrue(matrix1.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(0, 0);
      Matrix<Integer> matrix1 = new Matrix<Integer>(0, (-510));
      Matrix<Integer> matrix2 = matrix1.multiply(matrix0);
      assertTrue(matrix2.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(31, 2861);
      // Undeclared exception!
      try { 
        matrix0.subtract(matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(0, 0);
      Integer[][] integerArray0 = new Integer[1][7];
      Matrix<Integer> matrix1 = new Matrix<Integer>(1614, 0, integerArray0);
      Matrix<Integer> matrix2 = matrix0.subtract(matrix1);
      assertTrue(matrix2.equals((Object)matrix0));
      assertEquals(1614, matrix1.getRows());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>((-850), (-850));
      assertEquals((-850), matrix0.getRows());
      
      Matrix<Integer> matrix1 = matrix0.subtract(matrix0);
      assertEquals((-850), matrix1.getRows());
      assertEquals((-850), matrix0.getCols());
      assertEquals((-850), matrix1.getCols());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(4957, 0);
      Matrix<Integer> matrix1 = new Matrix<Integer>(4110, 0);
      Matrix<Integer> matrix2 = matrix0.add(matrix1);
      assertTrue(matrix2.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(0, 0);
      Matrix<Integer> matrix1 = matrix0.add(matrix0);
      assertTrue(matrix1.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(0, 0);
      Matrix<Integer> matrix1 = new Matrix<Integer>(0, 6);
      Matrix<Integer> matrix2 = matrix0.add(matrix1);
      assertEquals(6, matrix1.getCols());
      assertTrue(matrix2.equals((Object)matrix0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>((-850), (-850));
      try { 
        matrix0.identity();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>((-2586), (-1));
      try { 
        matrix0.identity();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Matrix should be a square
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(0, 0);
      try { 
        matrix0.identity();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(0, 352);
      Integer[][] integerArray0 = new Integer[0][3];
      Matrix<Integer> matrix1 = new Matrix<Integer>(352, 0, integerArray0);
      // Undeclared exception!
      try { 
        matrix1.multiply(matrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Integer[][] integerArray0 = new Integer[7][8];
      Matrix<Integer> matrix0 = null;
      try {
        matrix0 = new Matrix<Integer>(31, 1790, integerArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>((-850), (-850));
      // Undeclared exception!
      try { 
        matrix0.equals(matrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(0, 352);
      int int0 = matrix0.getRows();
      assertEquals(352, matrix0.getCols());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>((-850), (-850));
      Integer integer0 = new Integer((-850));
      // Undeclared exception!
      try { 
        matrix0.set((-850), 0, integer0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 722500
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(0, (-935));
      int int0 = matrix0.getCols();
      assertEquals((-935), int0);
      assertEquals(0, matrix0.getRows());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Matrix<Integer> matrix0 = new Matrix<Integer>(0, 0);
      // Undeclared exception!
      try { 
        matrix0.get(0, 2065);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2065
         //
         verifyException("com.jwetherell.algorithms.data_structures.Matrix", e);
      }
  }
}

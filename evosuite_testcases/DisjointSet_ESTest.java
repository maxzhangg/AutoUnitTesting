/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 01 04:43:05 GMT 2025
 */

package com.jwetherell.algorithms.data_structures;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.jwetherell.algorithms.data_structures.DisjointSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DisjointSet_ESTest extends DisjointSet_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      DisjointSet.Item<Object> disjointSet_Item0 = DisjointSet.makeSet(object0);
      assertNotNull(disjointSet_Item0);
      assertEquals(0L, disjointSet_Item0.getRank());
      
      DisjointSet.Item<Object> disjointSet_Item1 = DisjointSet.makeSet((Object) disjointSet_Item0);
      assertNotNull(disjointSet_Item1);
      assertNotSame(disjointSet_Item0, disjointSet_Item1);
      assertNotSame(disjointSet_Item1, disjointSet_Item0);
      assertFalse(disjointSet_Item1.equals((Object)disjointSet_Item0));
      assertEquals(0L, disjointSet_Item0.getRank());
      assertEquals(0L, disjointSet_Item1.getRank());
      
      DisjointSet.Item<Object> disjointSet_Item2 = DisjointSet.union((DisjointSet.Item<Object>) disjointSet_Item1, (DisjointSet.Item<Object>) disjointSet_Item0);
      assertNotNull(disjointSet_Item2);
      assertNotSame(disjointSet_Item0, disjointSet_Item1);
      assertNotSame(disjointSet_Item0, disjointSet_Item2);
      assertNotSame(disjointSet_Item1, disjointSet_Item0);
      assertSame(disjointSet_Item1, disjointSet_Item2);
      assertSame(disjointSet_Item2, disjointSet_Item1);
      assertNotSame(disjointSet_Item2, disjointSet_Item0);
      assertEquals(0L, disjointSet_Item0.getRank());
      assertEquals(1L, disjointSet_Item1.getRank());
      assertEquals(1L, disjointSet_Item2.getRank());
      
      // Undeclared exception!
      try { 
        DisjointSet.union((DisjointSet.Item<Object>) disjointSet_Item0, (DisjointSet.Item<Object>) disjointSet_Item2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DisjointSet.Item<Object> disjointSet_Item0 = DisjointSet.makeSet((Object) null);
      assertNotNull(disjointSet_Item0);
      assertEquals(0L, disjointSet_Item0.getRank());
      
      // Undeclared exception!
      try { 
        DisjointSet.union((DisjointSet.Item<Object>) disjointSet_Item0, (DisjointSet.Item<Object>) disjointSet_Item0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.DisjointSet$Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      DisjointSet.Item<Object> disjointSet_Item0 = DisjointSet.makeSet(object0);
      assertNotNull(disjointSet_Item0);
      assertEquals(0L, disjointSet_Item0.getRank());
      
      DisjointSet.Item<Object> disjointSet_Item1 = DisjointSet.makeSet((Object) disjointSet_Item0);
      assertNotNull(disjointSet_Item1);
      assertNotSame(disjointSet_Item0, disjointSet_Item1);
      assertNotSame(disjointSet_Item1, disjointSet_Item0);
      assertFalse(disjointSet_Item1.equals((Object)disjointSet_Item0));
      assertEquals(0L, disjointSet_Item0.getRank());
      assertEquals(0L, disjointSet_Item1.getRank());
      
      DisjointSet.Item<Object> disjointSet_Item2 = DisjointSet.union((DisjointSet.Item<Object>) disjointSet_Item1, (DisjointSet.Item<Object>) disjointSet_Item0);
      assertNotNull(disjointSet_Item2);
      assertNotSame(disjointSet_Item0, disjointSet_Item1);
      assertNotSame(disjointSet_Item0, disjointSet_Item2);
      assertNotSame(disjointSet_Item1, disjointSet_Item0);
      assertSame(disjointSet_Item1, disjointSet_Item2);
      assertNotSame(disjointSet_Item2, disjointSet_Item0);
      assertSame(disjointSet_Item2, disjointSet_Item1);
      assertEquals(0L, disjointSet_Item0.getRank());
      assertEquals(1L, disjointSet_Item1.getRank());
      assertEquals(1L, disjointSet_Item2.getRank());
      
      // Undeclared exception!
      try { 
        DisjointSet.find((DisjointSet.Item<Object>) disjointSet_Item2);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DisjointSet.Item<Object> disjointSet_Item0 = new DisjointSet.Item<Object>((DisjointSet.Item<Object>) null, (Object) null);
      assertNotNull(disjointSet_Item0);
      assertEquals(0L, disjointSet_Item0.getRank());
      
      String string0 = disjointSet_Item0.toString();
      assertNotNull(string0);
      assertEquals("parent=null value=null", string0);
      assertEquals(0L, disjointSet_Item0.getRank());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      DisjointSet.Item<Object> disjointSet_Item0 = DisjointSet.makeSet(object0);
      assertNotNull(disjointSet_Item0);
      assertEquals(0L, disjointSet_Item0.getRank());
      
      Integer integer0 = new Integer((-327));
      assertNotNull(integer0);
      assertEquals((-327), (int)integer0);
      
      DisjointSet.Item<Object> disjointSet_Item1 = new DisjointSet.Item<Object>(disjointSet_Item0, integer0);
      assertNotNull(disjointSet_Item1);
      assertEquals(0L, disjointSet_Item0.getRank());
      assertEquals(0L, disjointSet_Item1.getRank());
      
      boolean boolean0 = disjointSet_Item0.equals(disjointSet_Item1);
      assertFalse(boolean0);
      assertEquals(0L, disjointSet_Item0.getRank());
      assertEquals(0L, disjointSet_Item1.getRank());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      DisjointSet.Item<Integer> disjointSet_Item0 = DisjointSet.makeSet(integer0);
      assertNotNull(disjointSet_Item0);
      assertEquals(0L, disjointSet_Item0.getRank());
      
      DisjointSet.Item<Object> disjointSet_Item1 = DisjointSet.makeSet((Object) "parent=0 value=0");
      assertNotNull(disjointSet_Item1);
      assertEquals(0L, disjointSet_Item1.getRank());
      
      boolean boolean0 = disjointSet_Item1.equals(disjointSet_Item0);
      assertFalse(boolean0);
      assertEquals(0L, disjointSet_Item0.getRank());
      assertEquals(0L, disjointSet_Item1.getRank());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      DisjointSet.Item<Object> disjointSet_Item0 = DisjointSet.makeSet(object0);
      assertNotNull(disjointSet_Item0);
      assertEquals(0L, disjointSet_Item0.getRank());
      
      boolean boolean0 = disjointSet_Item0.equals(object0);
      assertFalse(boolean0);
      assertEquals(0L, disjointSet_Item0.getRank());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      DisjointSet.Item<Integer> disjointSet_Item0 = DisjointSet.makeSet(integer0);
      assertNotNull(disjointSet_Item0);
      assertEquals(0L, disjointSet_Item0.getRank());
      
      DisjointSet.Item<Integer> disjointSet_Item1 = DisjointSet.find((DisjointSet.Item<Integer>) disjointSet_Item0);
      assertNotNull(disjointSet_Item1);
      assertSame(disjointSet_Item0, disjointSet_Item1);
      assertSame(disjointSet_Item1, disjointSet_Item0);
      assertEquals(0L, disjointSet_Item0.getRank());
      assertEquals(0L, disjointSet_Item1.getRank());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-1592));
      assertNotNull(integer0);
      assertEquals((-1592), (int)integer0);
      
      DisjointSet.Item<Integer> disjointSet_Item0 = new DisjointSet.Item<Integer>((DisjointSet.Item<Integer>) null, integer0);
      assertNotNull(disjointSet_Item0);
      assertEquals(0L, disjointSet_Item0.getRank());
      
      DisjointSet.Item<Integer> disjointSet_Item1 = DisjointSet.find((DisjointSet.Item<Integer>) disjointSet_Item0);
      assertNull(disjointSet_Item1);
      assertEquals(0L, disjointSet_Item0.getRank());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      DisjointSet.Item<Integer> disjointSet_Item0 = DisjointSet.makeSet(integer0);
      assertNotNull(disjointSet_Item0);
      assertEquals(0L, disjointSet_Item0.getRank());
      
      DisjointSet.Item<Object> disjointSet_Item1 = DisjointSet.makeSet((Object) disjointSet_Item0);
      assertNotNull(disjointSet_Item1);
      assertEquals(0L, disjointSet_Item0.getRank());
      assertEquals(0L, disjointSet_Item1.getRank());
      
      DisjointSet.Item<Object> disjointSet_Item2 = DisjointSet.makeSet((Object) integer0);
      assertNotNull(disjointSet_Item2);
      assertNotSame(disjointSet_Item2, disjointSet_Item1);
      assertFalse(disjointSet_Item2.equals((Object)disjointSet_Item1));
      assertEquals(0L, disjointSet_Item2.getRank());
      
      DisjointSet.Item<Object> disjointSet_Item3 = DisjointSet.union((DisjointSet.Item<Object>) disjointSet_Item2, (DisjointSet.Item<Object>) disjointSet_Item1);
      assertNotNull(disjointSet_Item3);
      assertNotSame(disjointSet_Item1, disjointSet_Item2);
      assertNotSame(disjointSet_Item1, disjointSet_Item3);
      assertNotSame(disjointSet_Item2, disjointSet_Item1);
      assertSame(disjointSet_Item2, disjointSet_Item3);
      assertNotSame(disjointSet_Item3, disjointSet_Item1);
      assertSame(disjointSet_Item3, disjointSet_Item2);
      assertFalse(disjointSet_Item1.equals((Object)disjointSet_Item2));
      assertFalse(disjointSet_Item2.equals((Object)disjointSet_Item1));
      assertFalse(disjointSet_Item3.equals((Object)disjointSet_Item1));
      assertEquals(0L, disjointSet_Item0.getRank());
      assertEquals(0L, disjointSet_Item1.getRank());
      assertEquals(1L, disjointSet_Item2.getRank());
      assertEquals(1L, disjointSet_Item3.getRank());
      
      DisjointSet.Item<Object> disjointSet_Item4 = DisjointSet.find((DisjointSet.Item<Object>) disjointSet_Item1);
      assertNotNull(disjointSet_Item4);
      assertNotSame(disjointSet_Item1, disjointSet_Item2);
      assertNotSame(disjointSet_Item1, disjointSet_Item3);
      assertNotSame(disjointSet_Item1, disjointSet_Item4);
      assertSame(disjointSet_Item4, disjointSet_Item3);
      assertSame(disjointSet_Item4, disjointSet_Item2);
      assertNotSame(disjointSet_Item4, disjointSet_Item1);
      assertFalse(disjointSet_Item1.equals((Object)disjointSet_Item2));
      assertFalse(disjointSet_Item1.equals((Object)disjointSet_Item3));
      assertFalse(disjointSet_Item4.equals((Object)disjointSet_Item1));
      assertEquals(0L, disjointSet_Item0.getRank());
      assertEquals(0L, disjointSet_Item1.getRank());
      assertEquals(1L, disjointSet_Item4.getRank());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DisjointSet.Item<Object> disjointSet_Item0 = DisjointSet.makeSet((Object) null);
      assertNotNull(disjointSet_Item0);
      assertEquals(0L, disjointSet_Item0.getRank());
      
      // Undeclared exception!
      try { 
        DisjointSet.find((DisjointSet.Item<Object>) disjointSet_Item0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.jwetherell.algorithms.data_structures.DisjointSet$Item", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DisjointSet.Item<Object> disjointSet_Item0 = DisjointSet.find((DisjointSet.Item<Object>) null);
      assertNull(disjointSet_Item0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      DisjointSet.Item<Object> disjointSet_Item0 = DisjointSet.makeSet(object0);
      assertNotNull(disjointSet_Item0);
      assertEquals(0L, disjointSet_Item0.getRank());
      
      DisjointSet.Item<Object> disjointSet_Item1 = DisjointSet.makeSet((Object) disjointSet_Item0);
      assertNotNull(disjointSet_Item1);
      assertNotSame(disjointSet_Item0, disjointSet_Item1);
      assertNotSame(disjointSet_Item1, disjointSet_Item0);
      assertFalse(disjointSet_Item1.equals((Object)disjointSet_Item0));
      assertEquals(0L, disjointSet_Item0.getRank());
      assertEquals(0L, disjointSet_Item1.getRank());
      
      DisjointSet.Item<Object> disjointSet_Item2 = DisjointSet.union((DisjointSet.Item<Object>) disjointSet_Item0, (DisjointSet.Item<Object>) disjointSet_Item1);
      assertNotNull(disjointSet_Item2);
      assertNotSame(disjointSet_Item0, disjointSet_Item1);
      assertSame(disjointSet_Item0, disjointSet_Item2);
      assertNotSame(disjointSet_Item1, disjointSet_Item0);
      assertNotSame(disjointSet_Item1, disjointSet_Item2);
      assertSame(disjointSet_Item2, disjointSet_Item0);
      assertNotSame(disjointSet_Item2, disjointSet_Item1);
      assertFalse(disjointSet_Item0.equals((Object)disjointSet_Item1));
      assertFalse(disjointSet_Item1.equals((Object)disjointSet_Item0));
      assertFalse(disjointSet_Item2.equals((Object)disjointSet_Item1));
      assertEquals(1L, disjointSet_Item0.getRank());
      assertEquals(0L, disjointSet_Item1.getRank());
      assertEquals(1L, disjointSet_Item2.getRank());
      
      String string0 = disjointSet_Item0.toString();
      assertNotNull(string0);
      assertNotSame(disjointSet_Item0, disjointSet_Item1);
      assertSame(disjointSet_Item0, disjointSet_Item2);
      assertFalse(disjointSet_Item0.equals((Object)disjointSet_Item1));
      assertEquals(1L, disjointSet_Item0.getRank());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(1134);
      assertNotNull(integer0);
      assertEquals(1134, (int)integer0);
      
      DisjointSet.Item<Object> disjointSet_Item0 = DisjointSet.makeSet((Object) integer0);
      assertNotNull(disjointSet_Item0);
      assertEquals(0L, disjointSet_Item0.getRank());
      
      DisjointSet.Item<Object> disjointSet_Item1 = new DisjointSet.Item<Object>(disjointSet_Item0, (Object) null);
      assertNotNull(disjointSet_Item1);
      assertEquals(0L, disjointSet_Item0.getRank());
      assertEquals(0L, disjointSet_Item1.getRank());
      
      boolean boolean0 = disjointSet_Item1.equals(disjointSet_Item0);
      assertTrue(boolean0);
      assertEquals(0L, disjointSet_Item0.getRank());
      assertEquals(0L, disjointSet_Item1.getRank());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(1134);
      assertNotNull(integer0);
      assertEquals(1134, (int)integer0);
      
      DisjointSet.Item<Object> disjointSet_Item0 = DisjointSet.makeSet((Object) integer0);
      assertNotNull(disjointSet_Item0);
      assertEquals(0L, disjointSet_Item0.getRank());
      
      DisjointSet.Item<Integer> disjointSet_Item1 = new DisjointSet.Item<Integer>((DisjointSet.Item<Integer>) null, integer0);
      assertNotNull(disjointSet_Item1);
      assertEquals(0L, disjointSet_Item1.getRank());
      
      boolean boolean0 = disjointSet_Item1.equals(disjointSet_Item0);
      assertTrue(boolean0);
      assertEquals(0L, disjointSet_Item0.getRank());
      assertEquals(0L, disjointSet_Item1.getRank());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DisjointSet.Item<Object> disjointSet_Item0 = new DisjointSet.Item<Object>((DisjointSet.Item<Object>) null, (Object) null);
      assertNotNull(disjointSet_Item0);
      assertEquals(0L, disjointSet_Item0.getRank());
      
      boolean boolean0 = disjointSet_Item0.equals(disjointSet_Item0);
      assertTrue(boolean0);
      assertEquals(0L, disjointSet_Item0.getRank());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      DisjointSet.Item<Object> disjointSet_Item0 = DisjointSet.makeSet(object0);
      assertNotNull(disjointSet_Item0);
      assertEquals(0L, disjointSet_Item0.getRank());
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      DisjointSet.Item<Object> disjointSet_Item1 = DisjointSet.makeSet(object1);
      assertNotNull(disjointSet_Item1);
      assertNotSame(object1, object0);
      assertNotSame(disjointSet_Item1, disjointSet_Item0);
      assertFalse(object1.equals((Object)object0));
      assertFalse(disjointSet_Item1.equals((Object)disjointSet_Item0));
      assertEquals(0L, disjointSet_Item1.getRank());
      
      DisjointSet.Item<Object> disjointSet_Item2 = DisjointSet.union((DisjointSet.Item<Object>) disjointSet_Item0, (DisjointSet.Item<Object>) disjointSet_Item1);
      assertNotNull(disjointSet_Item2);
      assertNotSame(object0, object1);
      assertNotSame(disjointSet_Item0, disjointSet_Item1);
      assertSame(disjointSet_Item0, disjointSet_Item2);
      assertNotSame(object1, object0);
      assertNotSame(disjointSet_Item1, disjointSet_Item2);
      assertNotSame(disjointSet_Item1, disjointSet_Item0);
      assertSame(disjointSet_Item2, disjointSet_Item0);
      assertNotSame(disjointSet_Item2, disjointSet_Item1);
      assertFalse(object0.equals((Object)object1));
      assertFalse(disjointSet_Item0.equals((Object)disjointSet_Item1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(disjointSet_Item1.equals((Object)disjointSet_Item0));
      assertFalse(disjointSet_Item2.equals((Object)disjointSet_Item1));
      assertEquals(1L, disjointSet_Item0.getRank());
      assertEquals(0L, disjointSet_Item1.getRank());
      assertEquals(1L, disjointSet_Item2.getRank());
      
      DisjointSet.Item<Object> disjointSet_Item3 = DisjointSet.makeSet(object1);
      assertNotNull(disjointSet_Item3);
      assertNotSame(object1, object0);
      assertNotSame(disjointSet_Item3, disjointSet_Item0);
      assertNotSame(disjointSet_Item3, disjointSet_Item1);
      assertNotSame(disjointSet_Item3, disjointSet_Item2);
      assertFalse(object1.equals((Object)object0));
      assertFalse(disjointSet_Item3.equals((Object)disjointSet_Item0));
      assertFalse(disjointSet_Item3.equals((Object)disjointSet_Item1));
      assertFalse(disjointSet_Item3.equals((Object)disjointSet_Item2));
      assertEquals(0L, disjointSet_Item3.getRank());
      
      DisjointSet.Item<Object> disjointSet_Item4 = DisjointSet.union((DisjointSet.Item<Object>) disjointSet_Item0, (DisjointSet.Item<Object>) disjointSet_Item3);
      assertNotNull(disjointSet_Item4);
      assertNotSame(object0, object1);
      assertNotSame(disjointSet_Item0, disjointSet_Item3);
      assertNotSame(disjointSet_Item0, disjointSet_Item1);
      assertSame(disjointSet_Item0, disjointSet_Item4);
      assertSame(disjointSet_Item0, disjointSet_Item2);
      assertNotSame(object1, object0);
      assertNotSame(disjointSet_Item3, disjointSet_Item0);
      assertNotSame(disjointSet_Item3, disjointSet_Item4);
      assertNotSame(disjointSet_Item3, disjointSet_Item1);
      assertNotSame(disjointSet_Item3, disjointSet_Item2);
      assertNotSame(disjointSet_Item4, disjointSet_Item3);
      assertSame(disjointSet_Item4, disjointSet_Item2);
      assertNotSame(disjointSet_Item4, disjointSet_Item1);
      assertSame(disjointSet_Item4, disjointSet_Item0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(disjointSet_Item0.equals((Object)disjointSet_Item3));
      assertFalse(disjointSet_Item0.equals((Object)disjointSet_Item1));
      assertFalse(object1.equals((Object)object0));
      assertFalse(disjointSet_Item3.equals((Object)disjointSet_Item0));
      assertFalse(disjointSet_Item3.equals((Object)disjointSet_Item2));
      assertTrue(disjointSet_Item3.equals((Object)disjointSet_Item1));
      assertFalse(disjointSet_Item4.equals((Object)disjointSet_Item3));
      assertFalse(disjointSet_Item4.equals((Object)disjointSet_Item1));
      assertEquals(1L, disjointSet_Item0.getRank());
      assertEquals(0L, disjointSet_Item3.getRank());
      assertEquals(1L, disjointSet_Item4.getRank());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Object object0 = new Object();
      assertNotNull(object0);
      
      DisjointSet.Item<Object> disjointSet_Item0 = DisjointSet.makeSet(object0);
      assertNotNull(disjointSet_Item0);
      assertEquals(0L, disjointSet_Item0.getRank());
      
      DisjointSet.Item<Object> disjointSet_Item1 = DisjointSet.makeSet((Object) disjointSet_Item0);
      assertNotNull(disjointSet_Item1);
      assertNotSame(disjointSet_Item0, disjointSet_Item1);
      assertNotSame(disjointSet_Item1, disjointSet_Item0);
      assertFalse(disjointSet_Item1.equals((Object)disjointSet_Item0));
      assertEquals(0L, disjointSet_Item0.getRank());
      assertEquals(0L, disjointSet_Item1.getRank());
      
      DisjointSet.Item<Object> disjointSet_Item2 = DisjointSet.union((DisjointSet.Item<Object>) disjointSet_Item0, (DisjointSet.Item<Object>) disjointSet_Item1);
      assertNotNull(disjointSet_Item2);
      assertSame(disjointSet_Item0, disjointSet_Item2);
      assertNotSame(disjointSet_Item0, disjointSet_Item1);
      assertNotSame(disjointSet_Item1, disjointSet_Item0);
      assertNotSame(disjointSet_Item1, disjointSet_Item2);
      assertSame(disjointSet_Item2, disjointSet_Item0);
      assertNotSame(disjointSet_Item2, disjointSet_Item1);
      assertFalse(disjointSet_Item0.equals((Object)disjointSet_Item1));
      assertFalse(disjointSet_Item1.equals((Object)disjointSet_Item0));
      assertFalse(disjointSet_Item2.equals((Object)disjointSet_Item1));
      assertEquals(1L, disjointSet_Item0.getRank());
      assertEquals(0L, disjointSet_Item1.getRank());
      assertEquals(1L, disjointSet_Item2.getRank());
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      DisjointSet.Item<Object> disjointSet_Item3 = DisjointSet.makeSet(object1);
      assertNotNull(disjointSet_Item3);
      assertNotSame(object1, object0);
      assertNotSame(disjointSet_Item3, disjointSet_Item0);
      assertNotSame(disjointSet_Item3, disjointSet_Item1);
      assertNotSame(disjointSet_Item3, disjointSet_Item2);
      assertFalse(object1.equals((Object)object0));
      assertFalse(disjointSet_Item3.equals((Object)disjointSet_Item0));
      assertFalse(disjointSet_Item3.equals((Object)disjointSet_Item1));
      assertFalse(disjointSet_Item3.equals((Object)disjointSet_Item2));
      assertEquals(0L, disjointSet_Item3.getRank());
      
      DisjointSet.Item<Object> disjointSet_Item4 = DisjointSet.union((DisjointSet.Item<Object>) disjointSet_Item3, (DisjointSet.Item<Object>) disjointSet_Item1);
      assertNotNull(disjointSet_Item4);
      assertNotSame(object0, object1);
      assertSame(disjointSet_Item0, disjointSet_Item4);
      assertSame(disjointSet_Item0, disjointSet_Item2);
      assertNotSame(disjointSet_Item0, disjointSet_Item3);
      assertNotSame(disjointSet_Item0, disjointSet_Item1);
      assertNotSame(disjointSet_Item1, disjointSet_Item0);
      assertNotSame(disjointSet_Item1, disjointSet_Item3);
      assertNotSame(disjointSet_Item1, disjointSet_Item2);
      assertNotSame(disjointSet_Item1, disjointSet_Item4);
      assertNotSame(object1, object0);
      assertNotSame(disjointSet_Item3, disjointSet_Item0);
      assertNotSame(disjointSet_Item3, disjointSet_Item1);
      assertNotSame(disjointSet_Item3, disjointSet_Item2);
      assertNotSame(disjointSet_Item3, disjointSet_Item4);
      assertNotSame(disjointSet_Item4, disjointSet_Item1);
      assertSame(disjointSet_Item4, disjointSet_Item0);
      assertSame(disjointSet_Item4, disjointSet_Item2);
      assertNotSame(disjointSet_Item4, disjointSet_Item3);
      assertFalse(object0.equals((Object)object1));
      assertFalse(disjointSet_Item0.equals((Object)disjointSet_Item3));
      assertFalse(disjointSet_Item0.equals((Object)disjointSet_Item1));
      assertFalse(disjointSet_Item1.equals((Object)disjointSet_Item0));
      assertFalse(disjointSet_Item1.equals((Object)disjointSet_Item3));
      assertFalse(disjointSet_Item1.equals((Object)disjointSet_Item2));
      assertFalse(object1.equals((Object)object0));
      assertFalse(disjointSet_Item3.equals((Object)disjointSet_Item0));
      assertFalse(disjointSet_Item3.equals((Object)disjointSet_Item1));
      assertFalse(disjointSet_Item3.equals((Object)disjointSet_Item2));
      assertFalse(disjointSet_Item4.equals((Object)disjointSet_Item1));
      assertFalse(disjointSet_Item4.equals((Object)disjointSet_Item3));
      assertEquals(1L, disjointSet_Item0.getRank());
      assertEquals(0L, disjointSet_Item1.getRank());
      assertEquals(0L, disjointSet_Item3.getRank());
      assertEquals(1L, disjointSet_Item4.getRank());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      DisjointSet.Item<Object> disjointSet_Item0 = DisjointSet.makeSet(object0);
      DisjointSet.Item<Object> disjointSet_Item1 = DisjointSet.union((DisjointSet.Item<Object>) null, (DisjointSet.Item<Object>) disjointSet_Item0);
      assertEquals(0L, disjointSet_Item1.getRank());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      DisjointSet.Item<Object> disjointSet_Item0 = DisjointSet.makeSet(object0);
      DisjointSet.Item<Object> disjointSet_Item1 = DisjointSet.makeSet((Object) disjointSet_Item0);
      DisjointSet.union((DisjointSet.Item<Object>) disjointSet_Item0, (DisjointSet.Item<Object>) disjointSet_Item1);
      DisjointSet.union((DisjointSet.Item<Object>) disjointSet_Item1, (DisjointSet.Item<Object>) disjointSet_Item1);
      assertEquals(1L, disjointSet_Item0.getRank());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DisjointSet.Item<Object> disjointSet_Item0 = new DisjointSet.Item<Object>((DisjointSet.Item<Object>) null, (Object) null);
      DisjointSet.union((DisjointSet.Item<Object>) null, (DisjointSet.Item<Object>) disjointSet_Item0);
      assertEquals(0L, disjointSet_Item0.getRank());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer(1134);
      DisjointSet.Item<Object> disjointSet_Item0 = DisjointSet.makeSet((Object) integer0);
      DisjointSet.Item<Object> disjointSet_Item1 = DisjointSet.union((DisjointSet.Item<Object>) disjointSet_Item0, (DisjointSet.Item<Object>) null);
      assertEquals(0L, disjointSet_Item1.getRank());
      assertNotNull(disjointSet_Item1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer((-327));
      DisjointSet.Item<Integer> disjointSet_Item0 = DisjointSet.makeSet(integer0);
      long long0 = disjointSet_Item0.getRank();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Object object0 = new Object();
      DisjointSet.Item<Object> disjointSet_Item0 = DisjointSet.makeSet(object0);
      disjointSet_Item0.getValue();
      assertEquals(0L, disjointSet_Item0.getRank());
  }
}
